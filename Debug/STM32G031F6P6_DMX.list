
STM32G031F6P6_DMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004818  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a14  08004a14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a1c  08004a1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000070  08004a94  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08004a94  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c974  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201d  00000000  00000000  0002ca0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002ea30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002f3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165a7  00000000  00000000  0002fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfa9  00000000  00000000  0004623f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089fe9  00000000  00000000  000521e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc1d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b0  00000000  00000000  000dc224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080048bc 	.word	0x080048bc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080048bc 	.word	0x080048bc

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	469b      	mov	fp, r3
 800047a:	d433      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047c:	465a      	mov	r2, fp
 800047e:	4653      	mov	r3, sl
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83a      	bhi.n	8000506 <__udivmoddi4+0xc2>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e078      	b.n	8000588 <__udivmoddi4+0x144>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e075      	b.n	800058e <__udivmoddi4+0x14a>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e028      	b.n	800050e <__udivmoddi4+0xca>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	2320      	movs	r3, #32
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	4652      	mov	r2, sl
 80004ec:	40da      	lsrs	r2, r3
 80004ee:	4641      	mov	r1, r8
 80004f0:	0013      	movs	r3, r2
 80004f2:	464a      	mov	r2, r9
 80004f4:	408a      	lsls	r2, r1
 80004f6:	0017      	movs	r7, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	431f      	orrs	r7, r3
 80004fc:	4653      	mov	r3, sl
 80004fe:	4093      	lsls	r3, r2
 8000500:	001e      	movs	r6, r3
 8000502:	42af      	cmp	r7, r5
 8000504:	d9c4      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0d9      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000514:	07fb      	lsls	r3, r7, #31
 8000516:	0872      	lsrs	r2, r6, #1
 8000518:	431a      	orrs	r2, r3
 800051a:	4646      	mov	r6, r8
 800051c:	087b      	lsrs	r3, r7, #1
 800051e:	e00e      	b.n	800053e <__udivmoddi4+0xfa>
 8000520:	42ab      	cmp	r3, r5
 8000522:	d101      	bne.n	8000528 <__udivmoddi4+0xe4>
 8000524:	42a2      	cmp	r2, r4
 8000526:	d80c      	bhi.n	8000542 <__udivmoddi4+0xfe>
 8000528:	1aa4      	subs	r4, r4, r2
 800052a:	419d      	sbcs	r5, r3
 800052c:	2001      	movs	r0, #1
 800052e:	1924      	adds	r4, r4, r4
 8000530:	416d      	adcs	r5, r5
 8000532:	2100      	movs	r1, #0
 8000534:	3e01      	subs	r6, #1
 8000536:	1824      	adds	r4, r4, r0
 8000538:	414d      	adcs	r5, r1
 800053a:	2e00      	cmp	r6, #0
 800053c:	d006      	beq.n	800054c <__udivmoddi4+0x108>
 800053e:	42ab      	cmp	r3, r5
 8000540:	d9ee      	bls.n	8000520 <__udivmoddi4+0xdc>
 8000542:	3e01      	subs	r6, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2e00      	cmp	r6, #0
 800054a:	d1f8      	bne.n	800053e <__udivmoddi4+0xfa>
 800054c:	9800      	ldr	r0, [sp, #0]
 800054e:	9901      	ldr	r1, [sp, #4]
 8000550:	465b      	mov	r3, fp
 8000552:	1900      	adds	r0, r0, r4
 8000554:	4169      	adcs	r1, r5
 8000556:	2b00      	cmp	r3, #0
 8000558:	db24      	blt.n	80005a4 <__udivmoddi4+0x160>
 800055a:	002b      	movs	r3, r5
 800055c:	465a      	mov	r2, fp
 800055e:	4644      	mov	r4, r8
 8000560:	40d3      	lsrs	r3, r2
 8000562:	002a      	movs	r2, r5
 8000564:	40e2      	lsrs	r2, r4
 8000566:	001c      	movs	r4, r3
 8000568:	465b      	mov	r3, fp
 800056a:	0015      	movs	r5, r2
 800056c:	2b00      	cmp	r3, #0
 800056e:	db2a      	blt.n	80005c6 <__udivmoddi4+0x182>
 8000570:	0026      	movs	r6, r4
 8000572:	409e      	lsls	r6, r3
 8000574:	0033      	movs	r3, r6
 8000576:	0026      	movs	r6, r4
 8000578:	4647      	mov	r7, r8
 800057a:	40be      	lsls	r6, r7
 800057c:	0032      	movs	r2, r6
 800057e:	1a80      	subs	r0, r0, r2
 8000580:	4199      	sbcs	r1, r3
 8000582:	9000      	str	r0, [sp, #0]
 8000584:	9101      	str	r1, [sp, #4]
 8000586:	e79f      	b.n	80004c8 <__udivmoddi4+0x84>
 8000588:	42a3      	cmp	r3, r4
 800058a:	d8bc      	bhi.n	8000506 <__udivmoddi4+0xc2>
 800058c:	e783      	b.n	8000496 <__udivmoddi4+0x52>
 800058e:	4642      	mov	r2, r8
 8000590:	2320      	movs	r3, #32
 8000592:	2100      	movs	r1, #0
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	2200      	movs	r2, #0
 8000598:	9100      	str	r1, [sp, #0]
 800059a:	9201      	str	r2, [sp, #4]
 800059c:	2201      	movs	r2, #1
 800059e:	40da      	lsrs	r2, r3
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	e786      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	1a9b      	subs	r3, r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	4646      	mov	r6, r8
 80005ae:	409a      	lsls	r2, r3
 80005b0:	0023      	movs	r3, r4
 80005b2:	40f3      	lsrs	r3, r6
 80005b4:	4644      	mov	r4, r8
 80005b6:	4313      	orrs	r3, r2
 80005b8:	002a      	movs	r2, r5
 80005ba:	40e2      	lsrs	r2, r4
 80005bc:	001c      	movs	r4, r3
 80005be:	465b      	mov	r3, fp
 80005c0:	0015      	movs	r5, r2
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	dad4      	bge.n	8000570 <__udivmoddi4+0x12c>
 80005c6:	4642      	mov	r2, r8
 80005c8:	002f      	movs	r7, r5
 80005ca:	2320      	movs	r3, #32
 80005cc:	0026      	movs	r6, r4
 80005ce:	4097      	lsls	r7, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	40de      	lsrs	r6, r3
 80005d4:	003b      	movs	r3, r7
 80005d6:	4333      	orrs	r3, r6
 80005d8:	e7cd      	b.n	8000576 <__udivmoddi4+0x132>
 80005da:	46c0      	nop			; (mov r8, r8)

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <__io_putchar+0x20>)
 800063a:	1d39      	adds	r1, r7, #4
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <__io_putchar+0x24>)
 800063e:	2201      	movs	r2, #1
 8000640:	f001 fe5c 	bl	80022fc <HAL_UART_Transmit>

  return ch;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	0018      	movs	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	0000ffff 	.word	0x0000ffff
 8000654:	20000120 	.word	0x20000120

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fb97 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f83d 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f935 	bl	80008d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800066a:	f000 f897 	bl	800079c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800066e:	f000 f8fd 	bl	800086c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Start\n");
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <main+0x74>)
 8000674:	0018      	movs	r0, r3
 8000676:	f003 f90f 	bl	8003898 <puts>
  while (1)
  {
	  if(tim_update==SET){
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <main+0x78>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d1fb      	bne.n	800067a <main+0x22>
		  printf("DMX: ");
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <main+0x7c>)
 8000684:	0018      	movs	r0, r3
 8000686:	f003 f867 	bl	8003758 <iprintf>
		  for(int i=1;i<=512;i++){
 800068a:	2301      	movs	r3, #1
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	e00c      	b.n	80006aa <main+0x52>
			  printf("%d ",DMX_Rx_buf[i]);
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <main+0x80>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	18d3      	adds	r3, r2, r3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	001a      	movs	r2, r3
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <main+0x84>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f003 f85a 	bl	8003758 <iprintf>
		  for(int i=1;i<=512;i++){
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3301      	adds	r3, #1
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dded      	ble.n	8000690 <main+0x38>
		  }
		  printf("\n");
 80006b4:	200a      	movs	r0, #10
 80006b6:	f003 f869 	bl	800378c <putchar>
		  tim_update=RESET;
 80006ba:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <main+0x78>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1000);
 80006c0:	23fa      	movs	r3, #250	; 0xfa
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	0018      	movs	r0, r3
 80006c6:	f000 fbe9 	bl	8000e9c <HAL_Delay>
	  if(tim_update==SET){
 80006ca:	e7d6      	b.n	800067a <main+0x22>
 80006cc:	080048d4 	.word	0x080048d4
 80006d0:	200003b5 	.word	0x200003b5
 80006d4:	080048dc 	.word	0x080048dc
 80006d8:	200001b4 	.word	0x200001b4
 80006dc:	080048e4 	.word	0x080048e4

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b093      	sub	sp, #76	; 0x4c
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	2410      	movs	r4, #16
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	2338      	movs	r3, #56	; 0x38
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f003 f829 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f6:	003b      	movs	r3, r7
 80006f8:	0018      	movs	r0, r3
 80006fa:	2310      	movs	r3, #16
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f003 f822 	bl	8003748 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	0018      	movs	r0, r3
 800070a:	f000 ff17 	bl	800153c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2202      	movs	r2, #2
 8000712:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	0052      	lsls	r2, r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800071c:	0021      	movs	r1, r4
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2240      	movs	r2, #64	; 0x40
 8000728:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2202      	movs	r2, #2
 800072e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2202      	movs	r2, #2
 8000734:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2208      	movs	r2, #8
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	0292      	lsls	r2, r2, #10
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	0492      	lsls	r2, r2, #18
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2280      	movs	r2, #128	; 0x80
 8000756:	0592      	lsls	r2, r2, #22
 8000758:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	187b      	adds	r3, r7, r1
 800075c:	0018      	movs	r0, r3
 800075e:	f000 ff39 	bl	80015d4 <HAL_RCC_OscConfig>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000766:	f000 f953 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	003b      	movs	r3, r7
 800076c:	2207      	movs	r2, #7
 800076e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000770:	003b      	movs	r3, r7
 8000772:	2202      	movs	r2, #2
 8000774:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	003b      	movs	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	003b      	movs	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000782:	003b      	movs	r3, r7
 8000784:	2102      	movs	r1, #2
 8000786:	0018      	movs	r0, r3
 8000788:	f001 fa3e 	bl	8001c08 <HAL_RCC_ClockConfig>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000790:	f000 f93e 	bl	8000a10 <Error_Handler>
  }
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b013      	add	sp, #76	; 0x4c
 800079a:	bd90      	pop	{r4, r7, pc}

0800079c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007a2:	4a30      	ldr	r2, [pc, #192]	; (8000864 <MX_USART1_UART_Init+0xc8>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 250000;
 80007a6:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007a8:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <MX_USART1_UART_Init+0xcc>)
 80007aa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	0192      	lsls	r2, r2, #6
 80007b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b29      	ldr	r3, [pc, #164]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b24      	ldr	r3, [pc, #144]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 fd32 	bl	8002250 <HAL_UART_Init>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80007f0:	f000 f90e 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 80007f6:	2100      	movs	r1, #0
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 fe9b 	bl	8003534 <HAL_UARTEx_SetTxFifoThreshold>
 80007fe:	1e03      	subs	r3, r0, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000802:	f000 f905 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 8000808:	2100      	movs	r1, #0
 800080a:	0018      	movs	r0, r3
 800080c:	f002 fed2 	bl	80035b4 <HAL_UARTEx_SetRxFifoThreshold>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000814:	f000 f8fc 	bl	8000a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 800081a:	0018      	movs	r0, r3
 800081c:	f002 fe50 	bl	80034c0 <HAL_UARTEx_DisableFifoMode>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000824:	f000 f8f4 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2120      	movs	r1, #32
 8000834:	430a      	orrs	r2, r1
 8000836:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR); // # UART_IT_ORE  UART_IT_NE UART_IT_FE = OrverRunError NoiseError FrameError
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART1_UART_Init+0xc4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2101      	movs	r1, #1
 8000844:	430a      	orrs	r2, r1
 8000846:	609a      	str	r2, [r3, #8]
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	201b      	movs	r0, #27
 800084e:	f000 fbf5 	bl	800103c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000852:	201b      	movs	r0, #27
 8000854:	f000 fc07 	bl	8001066 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	2000008c 	.word	0x2000008c
 8000864:	40013800 	.word	0x40013800
 8000868:	0003d090 	.word	0x0003d090

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_USART2_UART_Init+0x60>)
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <MX_USART2_UART_Init+0x64>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_USART2_UART_Init+0x60>)
 8000878:	22e1      	movs	r2, #225	; 0xe1
 800087a:	0252      	lsls	r2, r2, #9
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_USART2_UART_Init+0x60>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART2_UART_Init+0x60>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART2_UART_Init+0x60>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART2_UART_Init+0x60>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_USART2_UART_Init+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART2_UART_Init+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <MX_USART2_UART_Init+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART2_UART_Init+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <MX_USART2_UART_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <MX_USART2_UART_Init+0x60>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fcca 	bl	8002250 <HAL_UART_Init>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008c0:	f000 f8a6 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20000120 	.word	0x20000120
 80008d0:	40004400 	.word	0x40004400

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	240c      	movs	r4, #12
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	0018      	movs	r0, r3
 80008e0:	2314      	movs	r3, #20
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f002 ff2f 	bl	8003748 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_GPIO_Init+0x84>)
 80008ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_GPIO_Init+0x84>)
 80008f0:	2102      	movs	r1, #2
 80008f2:	430a      	orrs	r2, r1
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_GPIO_Init+0x84>)
 80008f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008fa:	2202      	movs	r2, #2
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b15      	ldr	r3, [pc, #84]	; (8000958 <MX_GPIO_Init+0x84>)
 8000904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_GPIO_Init+0x84>)
 8000908:	2101      	movs	r1, #1
 800090a:	430a      	orrs	r2, r1
 800090c:	635a      	str	r2, [r3, #52]	; 0x34
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <MX_GPIO_Init+0x84>)
 8000910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000912:	2201      	movs	r2, #1
 8000914:	4013      	ands	r3, r2
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800091a:	23a0      	movs	r3, #160	; 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2200      	movs	r2, #0
 8000920:	2101      	movs	r1, #1
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fdec 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000928:	0021      	movs	r1, r4
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2201      	movs	r2, #1
 800092e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2201      	movs	r2, #1
 8000934:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2202      	movs	r2, #2
 8000940:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	187a      	adds	r2, r7, r1
 8000944:	23a0      	movs	r3, #160	; 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	0011      	movs	r1, r2
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fc74 	bl	8001238 <HAL_GPIO_Init>

}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b009      	add	sp, #36	; 0x24
 8000956:	bd90      	pop	{r4, r7, pc}
 8000958:	40021000 	.word	0x40021000

0800095c <dmx_uart_handler>:

/* USER CODE BEGIN 4 */

void dmx_uart_handler(UART_HandleTypeDef *huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	uint32_t StatusRead = huart->Instance->ISR;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	617b      	str	r3, [r7, #20]
	uint32_t Data = huart->Instance->RDR;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000972:	613b      	str	r3, [r7, #16]
	/* Frame Error interrupt happens after 10 bits of 0 (~40us), so it is
	 * after first 40 us of Break */
	uint32_t errorflags = (StatusRead & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	4a20      	ldr	r2, [pc, #128]	; (80009f8 <dmx_uart_handler+0x9c>)
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
	if (errorflags != 0U)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d005      	beq.n	800098e <dmx_uart_handler+0x32>
	{
		printf("Err %lu\n",errorflags);
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <dmx_uart_handler+0xa0>)
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f002 fee5 	bl	8003758 <iprintf>
	}
	if ((StatusRead & UART_FLAG_FE) == UART_FLAG_FE) {
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	2202      	movs	r2, #2
 8000992:	4013      	ands	r3, r2
 8000994:	d00a      	beq.n	80009ac <dmx_uart_handler+0x50>
		//printf("Err FE\n");
		fDMX_buf_right = 1;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <dmx_uart_handler+0xa4>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
		pDMX_buf = 0;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <dmx_uart_handler+0xa8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	801a      	strh	r2, [r3, #0]
		__HAL_UART_CLEAR_FEFLAG(huart);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2202      	movs	r2, #2
 80009a8:	621a      	str	r2, [r3, #32]
		return;
 80009aa:	e022      	b.n	80009f2 <dmx_uart_handler+0x96>
	}
	/* Receive Data interrupt */
	if ((StatusRead & UART_FLAG_RXNE) == UART_FLAG_RXNE) {
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	2220      	movs	r2, #32
 80009b0:	4013      	ands	r3, r2
 80009b2:	d01e      	beq.n	80009f2 <dmx_uart_handler+0x96>
		//printf("%lu ",Data);
		if (1 == fDMX_buf_right )
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <dmx_uart_handler+0xa4>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d116      	bne.n	80009ea <dmx_uart_handler+0x8e>
		{
		 DMX_Rx_buf[pDMX_buf++] = Data;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <dmx_uart_handler+0xa8>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	b291      	uxth	r1, r2
 80009c4:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <dmx_uart_handler+0xa8>)
 80009c6:	8011      	strh	r1, [r2, #0]
 80009c8:	001a      	movs	r2, r3
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	b2d9      	uxtb	r1, r3
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <dmx_uart_handler+0xac>)
 80009d0:	5499      	strb	r1, [r3, r2]

		 if (pDMX_buf > 512)
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <dmx_uart_handler+0xa8>)
 80009d4:	881a      	ldrh	r2, [r3, #0]
 80009d6:	2380      	movs	r3, #128	; 0x80
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	429a      	cmp	r2, r3
 80009dc:	d905      	bls.n	80009ea <dmx_uart_handler+0x8e>
		 {
			 fDMX_buf_right = 0;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <dmx_uart_handler+0xa4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
			 tim_update = SET;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <dmx_uart_handler+0xb0>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
		 }
		}
		__HAL_UART_CLEAR_FLAG(huart, UART_FLAG_RXNE);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2220      	movs	r2, #32
 80009f0:	621a      	str	r2, [r3, #32]
	}
}
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b006      	add	sp, #24
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	0000080f 	.word	0x0000080f
 80009fc:	080048e8 	.word	0x080048e8
 8000a00:	200003b6 	.word	0x200003b6
 8000a04:	200003b8 	.word	0x200003b8
 8000a08:	200001b4 	.word	0x200001b4
 8000a0c:	200003b5 	.word	0x200003b5

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <HAL_MspInit+0x44>)
 8000a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <HAL_MspInit+0x44>)
 8000a28:	2101      	movs	r1, #1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HAL_MspInit+0x44>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	2201      	movs	r2, #1
 8000a34:	4013      	ands	r3, r2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_MspInit+0x44>)
 8000a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_MspInit+0x44>)
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	0549      	lsls	r1, r1, #21
 8000a44:	430a      	orrs	r2, r1
 8000a46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_MspInit+0x44>)
 8000a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	055b      	lsls	r3, r3, #21
 8000a50:	4013      	ands	r3, r2
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40021000 	.word	0x40021000

08000a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b097      	sub	sp, #92	; 0x5c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6c:	2344      	movs	r3, #68	; 0x44
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	0018      	movs	r0, r3
 8000a72:	2314      	movs	r3, #20
 8000a74:	001a      	movs	r2, r3
 8000a76:	2100      	movs	r1, #0
 8000a78:	f002 fe66 	bl	8003748 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a7c:	241c      	movs	r4, #28
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	0018      	movs	r0, r3
 8000a82:	2328      	movs	r3, #40	; 0x28
 8000a84:	001a      	movs	r2, r3
 8000a86:	2100      	movs	r1, #0
 8000a88:	f002 fe5e 	bl	8003748 <memset>
  if(huart->Instance==USART1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a41      	ldr	r2, [pc, #260]	; (8000b98 <HAL_UART_MspInit+0x134>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d146      	bne.n	8000b24 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 fa59 	bl	8001f5c <HAL_RCCEx_PeriphCLKConfig>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aae:	f7ff ffaf 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab6:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	01c9      	lsls	r1, r1, #7
 8000abc:	430a      	orrs	r2, r1
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac0:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	01db      	lsls	r3, r3, #7
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
 8000acc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ace:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	635a      	str	r2, [r3, #52]	; 0x34
 8000ada:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	2202      	movs	r2, #2
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ae6:	2144      	movs	r1, #68	; 0x44
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	22c0      	movs	r2, #192	; 0xc0
 8000aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2202      	movs	r2, #2
 8000af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <HAL_UART_MspInit+0x13c>)
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	0010      	movs	r0, r2
 8000b0e:	f000 fb93 	bl	8001238 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	201b      	movs	r0, #27
 8000b18:	f000 fa90 	bl	800103c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b1c:	201b      	movs	r0, #27
 8000b1e:	f000 faa2 	bl	8001066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b22:	e035      	b.n	8000b90 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <HAL_UART_MspInit+0x140>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d130      	bne.n	8000b90 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0289      	lsls	r1, r1, #10
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	029b      	lsls	r3, r3, #10
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	430a      	orrs	r2, r1
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_UART_MspInit+0x138>)
 8000b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b62:	2144      	movs	r1, #68	; 0x44
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2201      	movs	r2, #1
 8000b80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	187a      	adds	r2, r7, r1
 8000b84:	23a0      	movs	r3, #160	; 0xa0
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	0011      	movs	r1, r2
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 fb54 	bl	8001238 <HAL_GPIO_Init>
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b017      	add	sp, #92	; 0x5c
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	40013800 	.word	0x40013800
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	50000400 	.word	0x50000400
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bcc:	f000 f94a 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	dmx_uart_handler(&huart1);
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <USART1_IRQHandler+0x1c>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff febc 	bl	800095c <dmx_uart_handler>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <USART1_IRQHandler+0x1c>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f001 fc24 	bl	8002434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	2000008c 	.word	0x2000008c

08000bf8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	e00a      	b.n	8000c20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c0a:	e000      	b.n	8000c0e <_read+0x16>
 8000c0c:	bf00      	nop
 8000c0e:	0001      	movs	r1, r0
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60ba      	str	r2, [r7, #8]
 8000c16:	b2ca      	uxtb	r2, r1
 8000c18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	dbf0      	blt.n	8000c0a <_read+0x12>
	}

return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b006      	add	sp, #24
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	e009      	b.n	8000c58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f7ff fcef 	bl	8000630 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	3301      	adds	r3, #1
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	697a      	ldr	r2, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dbf1      	blt.n	8000c44 <_write+0x12>
	}
	return len;
 8000c60:	687b      	ldr	r3, [r7, #4]
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b006      	add	sp, #24
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_close>:

int _close(int file)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
	return -1;
 8000c72:	2301      	movs	r3, #1
 8000c74:	425b      	negs	r3, r3
}
 8000c76:	0018      	movs	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2280      	movs	r2, #128	; 0x80
 8000c8c:	0192      	lsls	r2, r2, #6
 8000c8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_isatty>:

int _isatty(int file)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b004      	add	sp, #16
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f002 fcfe 	bl	80036f4 <__errno>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	425b      	negs	r3, r3
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	18d2      	adds	r2, r2, r3
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b006      	add	sp, #24
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20002000 	.word	0x20002000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	200003bc 	.word	0x200003bc
 8000d2c:	200003d8 	.word	0x200003d8

08000d30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d3e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d40:	f7ff fff6 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490d      	ldr	r1, [pc, #52]	; (8000d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0a      	ldr	r4, [pc, #40]	; (8000d88 <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d6a:	f002 fcc9 	bl	8003700 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d6e:	f7ff fc73 	bl	8000658 <main>

08000d72 <LoopForever>:

LoopForever:
  b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   r0, =_estack
 8000d74:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d80:	08004a24 	.word	0x08004a24
  ldr r2, =_sbss
 8000d84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d88:	200003d4 	.word	0x200003d4

08000d8c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_Init+0x3c>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_Init+0x3c>)
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	0049      	lsls	r1, r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000daa:	2003      	movs	r0, #3
 8000dac:	f000 f810 	bl	8000dd0 <HAL_InitTick>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	e001      	b.n	8000dc0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff fe2e 	bl	8000a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b002      	add	sp, #8
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd8:	230f      	movs	r3, #15
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_InitTick+0x88>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d02b      	beq.n	8000e40 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <HAL_InitTick+0x8c>)
 8000dea:	681c      	ldr	r4, [r3, #0]
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_InitTick+0x88>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	0019      	movs	r1, r3
 8000df2:	23fa      	movs	r3, #250	; 0xfa
 8000df4:	0098      	lsls	r0, r3, #2
 8000df6:	f7ff f98f 	bl	8000118 <__udivsi3>
 8000dfa:	0003      	movs	r3, r0
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	0020      	movs	r0, r4
 8000e00:	f7ff f98a 	bl	8000118 <__udivsi3>
 8000e04:	0003      	movs	r3, r0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 f93d 	bl	8001086 <HAL_SYSTICK_Config>
 8000e0c:	1e03      	subs	r3, r0, #0
 8000e0e:	d112      	bne.n	8000e36 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d80a      	bhi.n	8000e2c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 f90c 	bl	800103c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_InitTick+0x90>)
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e00d      	b.n	8000e48 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
 8000e34:	e008      	b.n	8000e48 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e36:	230f      	movs	r3, #15
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e003      	b.n	8000e48 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e40:	230f      	movs	r3, #15
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	781b      	ldrb	r3, [r3, #0]
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b005      	add	sp, #20
 8000e54:	bd90      	pop	{r4, r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000004 	.word	0x20000004

08000e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x1c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x20>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	18d2      	adds	r2, r2, r3
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_IncTick+0x20>)
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	20000008 	.word	0x20000008
 8000e84:	200003c0 	.word	0x200003c0

08000e88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <HAL_GetTick+0x10>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	200003c0 	.word	0x200003c0

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff fff0 	bl	8000e88 <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	001a      	movs	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	189b      	adds	r3, r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	f7ff ffe0 	bl	8000e88 <HAL_GetTick>
 8000ec8:	0002      	movs	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b004      	add	sp, #16
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	0002      	movs	r2, r0
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef6:	d809      	bhi.n	8000f0c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	001a      	movs	r2, r3
 8000efe:	231f      	movs	r3, #31
 8000f00:	401a      	ands	r2, r3
 8000f02:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <__NVIC_EnableIRQ+0x30>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	4091      	lsls	r1, r2
 8000f08:	000a      	movs	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b002      	add	sp, #8
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	0002      	movs	r2, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2c:	d828      	bhi.n	8000f80 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2e:	4a2f      	ldr	r2, [pc, #188]	; (8000fec <__NVIC_SetPriority+0xd4>)
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	33c0      	adds	r3, #192	; 0xc0
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	589b      	ldr	r3, [r3, r2]
 8000f3e:	1dfa      	adds	r2, r7, #7
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	0011      	movs	r1, r2
 8000f44:	2203      	movs	r2, #3
 8000f46:	400a      	ands	r2, r1
 8000f48:	00d2      	lsls	r2, r2, #3
 8000f4a:	21ff      	movs	r1, #255	; 0xff
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	401a      	ands	r2, r3
 8000f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	22ff      	movs	r2, #255	; 0xff
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	2303      	movs	r3, #3
 8000f66:	4003      	ands	r3, r0
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	481f      	ldr	r0, [pc, #124]	; (8000fec <__NVIC_SetPriority+0xd4>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	430a      	orrs	r2, r1
 8000f78:	33c0      	adds	r3, #192	; 0xc0
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f7e:	e031      	b.n	8000fe4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f80:	4a1b      	ldr	r2, [pc, #108]	; (8000ff0 <__NVIC_SetPriority+0xd8>)
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	0019      	movs	r1, r3
 8000f88:	230f      	movs	r3, #15
 8000f8a:	400b      	ands	r3, r1
 8000f8c:	3b08      	subs	r3, #8
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3306      	adds	r3, #6
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	3304      	adds	r3, #4
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1dfa      	adds	r2, r7, #7
 8000f9c:	7812      	ldrb	r2, [r2, #0]
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	00d2      	lsls	r2, r2, #3
 8000fa6:	21ff      	movs	r1, #255	; 0xff
 8000fa8:	4091      	lsls	r1, r2
 8000faa:	000a      	movs	r2, r1
 8000fac:	43d2      	mvns	r2, r2
 8000fae:	401a      	ands	r2, r3
 8000fb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	019b      	lsls	r3, r3, #6
 8000fb6:	22ff      	movs	r2, #255	; 0xff
 8000fb8:	401a      	ands	r2, r3
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	4003      	ands	r3, r0
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <__NVIC_SetPriority+0xd8>)
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	001c      	movs	r4, r3
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	4023      	ands	r3, r4
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	3306      	adds	r3, #6
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	18c3      	adds	r3, r0, r3
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	601a      	str	r2, [r3, #0]
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b003      	add	sp, #12
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	045b      	lsls	r3, r3, #17
 8001004:	429a      	cmp	r2, r3
 8001006:	d301      	bcc.n	800100c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001008:	2301      	movs	r3, #1
 800100a:	e010      	b.n	800102e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <SysTick_Config+0x44>)
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	3a01      	subs	r2, #1
 8001012:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001014:	2301      	movs	r3, #1
 8001016:	425b      	negs	r3, r3
 8001018:	2103      	movs	r1, #3
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff ff7c 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SysTick_Config+0x44>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SysTick_Config+0x44>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b002      	add	sp, #8
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	210f      	movs	r1, #15
 8001048:	187b      	adds	r3, r7, r1
 800104a:	1c02      	adds	r2, r0, #0
 800104c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	187b      	adds	r3, r7, r1
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	b25b      	sxtb	r3, r3
 8001056:	0011      	movs	r1, r2
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff ff5d 	bl	8000f18 <__NVIC_SetPriority>
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b004      	add	sp, #16
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	0002      	movs	r2, r0
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001072:	1dfb      	adds	r3, r7, #7
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b25b      	sxtb	r3, r3
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff ff33 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46bd      	mov	sp, r7
 8001082:	b002      	add	sp, #8
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ffaf 	bl	8000ff4 <SysTick_Config>
 8001096:	0003      	movs	r3, r0
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}

080010a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e050      	b.n	8001154 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2225      	movs	r2, #37	; 0x25
 80010b6:	5c9b      	ldrb	r3, [r3, r2]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d008      	beq.n	80010d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2204      	movs	r2, #4
 80010c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2224      	movs	r2, #36	; 0x24
 80010c8:	2100      	movs	r1, #0
 80010ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e041      	b.n	8001154 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	210e      	movs	r1, #14
 80010dc:	438a      	bics	r2, r1
 80010de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	491c      	ldr	r1, [pc, #112]	; (800115c <HAL_DMA_Abort+0xbc>)
 80010ec:	400a      	ands	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2101      	movs	r1, #1
 80010fc:	438a      	bics	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_DMA_Abort+0xc0>)
 8001102:	6859      	ldr	r1, [r3, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	221c      	movs	r2, #28
 800110a:	4013      	ands	r3, r2
 800110c:	2201      	movs	r2, #1
 800110e:	409a      	lsls	r2, r3
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <HAL_DMA_Abort+0xc0>)
 8001112:	430a      	orrs	r2, r1
 8001114:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800111e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00c      	beq.n	8001142 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001132:	490a      	ldr	r1, [pc, #40]	; (800115c <HAL_DMA_Abort+0xbc>)
 8001134:	400a      	ands	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001140:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2225      	movs	r2, #37	; 0x25
 8001146:	2101      	movs	r1, #1
 8001148:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2224      	movs	r2, #36	; 0x24
 800114e:	2100      	movs	r1, #0
 8001150:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b002      	add	sp, #8
 800115a:	bd80      	pop	{r7, pc}
 800115c:	fffffeff 	.word	0xfffffeff
 8001160:	40020000 	.word	0x40020000

08001164 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	210f      	movs	r1, #15
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2225      	movs	r2, #37	; 0x25
 8001178:	5c9b      	ldrb	r3, [r3, r2]
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d006      	beq.n	800118e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2204      	movs	r2, #4
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
 800118c:	e049      	b.n	8001222 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	210e      	movs	r1, #14
 800119a:	438a      	bics	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	438a      	bics	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	491d      	ldr	r1, [pc, #116]	; (8001230 <HAL_DMA_Abort_IT+0xcc>)
 80011ba:	400a      	ands	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_DMA_Abort_IT+0xd0>)
 80011c0:	6859      	ldr	r1, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	221c      	movs	r2, #28
 80011c8:	4013      	ands	r3, r2
 80011ca:	2201      	movs	r2, #1
 80011cc:	409a      	lsls	r2, r3
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <HAL_DMA_Abort_IT+0xd0>)
 80011d0:	430a      	orrs	r2, r1
 80011d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00c      	beq.n	8001200 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f0:	490f      	ldr	r1, [pc, #60]	; (8001230 <HAL_DMA_Abort_IT+0xcc>)
 80011f2:	400a      	ands	r2, r1
 80011f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2225      	movs	r2, #37	; 0x25
 8001204:	2101      	movs	r1, #1
 8001206:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2224      	movs	r2, #36	; 0x24
 800120c:	2100      	movs	r1, #0
 800120e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001214:	2b00      	cmp	r3, #0
 8001216:	d004      	beq.n	8001222 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	0010      	movs	r0, r2
 8001220:	4798      	blx	r3
    }
  }
  return status;
 8001222:	230f      	movs	r3, #15
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	781b      	ldrb	r3, [r3, #0]
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b004      	add	sp, #16
 800122e:	bd80      	pop	{r7, pc}
 8001230:	fffffeff 	.word	0xfffffeff
 8001234:	40020000 	.word	0x40020000

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	e147      	b.n	80014d8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4091      	lsls	r1, r2
 8001252:	000a      	movs	r2, r1
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d100      	bne.n	8001260 <HAL_GPIO_Init+0x28>
 800125e:	e138      	b.n	80014d2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	4013      	ands	r3, r2
 8001268:	2b01      	cmp	r3, #1
 800126a:	d005      	beq.n	8001278 <HAL_GPIO_Init+0x40>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	2203      	movs	r2, #3
 8001272:	4013      	ands	r3, r2
 8001274:	2b02      	cmp	r3, #2
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	409a      	lsls	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	43da      	mvns	r2, r3
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	409a      	lsls	r2, r3
 800129a:	0013      	movs	r3, r2
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
 80012b4:	0013      	movs	r3, r2
 80012b6:	43da      	mvns	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	2201      	movs	r2, #1
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2203      	movs	r2, #3
 80012e0:	4013      	ands	r3, r2
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	43da      	mvns	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2203      	movs	r2, #3
 800131c:	4013      	ands	r3, r2
 800131e:	2b02      	cmp	r3, #2
 8001320:	d123      	bne.n	800136a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	58d3      	ldr	r3, [r2, r3]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2207      	movs	r2, #7
 8001334:	4013      	ands	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	43da      	mvns	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2107      	movs	r1, #7
 800134e:	400b      	ands	r3, r1
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	6939      	ldr	r1, [r7, #16]
 8001368:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	43da      	mvns	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2203      	movs	r2, #3
 8001388:	401a      	ands	r2, r3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	23c0      	movs	r3, #192	; 0xc0
 80013a4:	029b      	lsls	r3, r3, #10
 80013a6:	4013      	ands	r3, r2
 80013a8:	d100      	bne.n	80013ac <HAL_GPIO_Init+0x174>
 80013aa:	e092      	b.n	80014d2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013ac:	4a50      	ldr	r2, [pc, #320]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3318      	adds	r3, #24
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	589b      	ldr	r3, [r3, r2]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2203      	movs	r2, #3
 80013be:	4013      	ands	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	220f      	movs	r2, #15
 80013c4:	409a      	lsls	r2, r3
 80013c6:	0013      	movs	r3, r2
 80013c8:	43da      	mvns	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	23a0      	movs	r3, #160	; 0xa0
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d013      	beq.n	8001402 <HAL_GPIO_Init+0x1ca>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a45      	ldr	r2, [pc, #276]	; (80014f4 <HAL_GPIO_Init+0x2bc>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d00d      	beq.n	80013fe <HAL_GPIO_Init+0x1c6>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <HAL_GPIO_Init+0x2c0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d007      	beq.n	80013fa <HAL_GPIO_Init+0x1c2>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a43      	ldr	r2, [pc, #268]	; (80014fc <HAL_GPIO_Init+0x2c4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d101      	bne.n	80013f6 <HAL_GPIO_Init+0x1be>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x1cc>
 80013f6:	2305      	movs	r3, #5
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x1cc>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x1cc>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x1cc>
 8001402:	2300      	movs	r3, #0
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	2103      	movs	r1, #3
 8001408:	400a      	ands	r2, r1
 800140a:	00d2      	lsls	r2, r2, #3
 800140c:	4093      	lsls	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001414:	4936      	ldr	r1, [pc, #216]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3318      	adds	r3, #24
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43da      	mvns	r2, r3
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	035b      	lsls	r3, r3, #13
 800143a:	4013      	ands	r3, r2
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43da      	mvns	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	039b      	lsls	r3, r3, #14
 8001464:	4013      	ands	r3, r2
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 8001478:	2384      	movs	r3, #132	; 0x84
 800147a:	58d3      	ldr	r3, [r2, r3]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43da      	mvns	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	029b      	lsls	r3, r3, #10
 8001490:	4013      	ands	r3, r2
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800149c:	4914      	ldr	r1, [pc, #80]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 800149e:	2284      	movs	r2, #132	; 0x84
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	58d3      	ldr	r3, [r2, r3]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	025b      	lsls	r3, r3, #9
 80014be:	4013      	ands	r3, r2
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ca:	4909      	ldr	r1, [pc, #36]	; (80014f0 <HAL_GPIO_Init+0x2b8>)
 80014cc:	2280      	movs	r2, #128	; 0x80
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	40da      	lsrs	r2, r3
 80014e0:	1e13      	subs	r3, r2, #0
 80014e2:	d000      	beq.n	80014e6 <HAL_GPIO_Init+0x2ae>
 80014e4:	e6b0      	b.n	8001248 <HAL_GPIO_Init+0x10>
  }
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b006      	add	sp, #24
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021800 	.word	0x40021800
 80014f4:	50000400 	.word	0x50000400
 80014f8:	50000800 	.word	0x50000800
 80014fc:	50000c00 	.word	0x50000c00

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	0008      	movs	r0, r1
 800150a:	0011      	movs	r1, r2
 800150c:	1cbb      	adds	r3, r7, #2
 800150e:	1c02      	adds	r2, r0, #0
 8001510:	801a      	strh	r2, [r3, #0]
 8001512:	1c7b      	adds	r3, r7, #1
 8001514:	1c0a      	adds	r2, r1, #0
 8001516:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001518:	1c7b      	adds	r3, r7, #1
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001520:	1cbb      	adds	r3, r7, #2
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800152a:	1cbb      	adds	r3, r7, #2
 800152c:	881a      	ldrh	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800154a:	4013      	ands	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	430a      	orrs	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	d11f      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	0013      	movs	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	189b      	adds	r3, r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4912      	ldr	r1, [pc, #72]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800156e:	0018      	movs	r0, r3
 8001570:	f7fe fdd2 	bl	8000118 <__udivsi3>
 8001574:	0003      	movs	r3, r0
 8001576:	3301      	adds	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800157a:	e008      	b.n	800158e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3b01      	subs	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	e001      	b.n	800158e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e009      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	401a      	ands	r2, r3
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	429a      	cmp	r2, r3
 800159e:	d0ed      	beq.n	800157c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b004      	add	sp, #16
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	40007000 	.word	0x40007000
 80015b0:	fffff9ff 	.word	0xfffff9ff
 80015b4:	20000000 	.word	0x20000000
 80015b8:	000f4240 	.word	0x000f4240

080015bc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	23e0      	movs	r3, #224	; 0xe0
 80015c6:	01db      	lsls	r3, r3, #7
 80015c8:	4013      	ands	r3, r2
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e2fe      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	d100      	bne.n	80015f2 <HAL_RCC_OscConfig+0x1e>
 80015f0:	e07c      	b.n	80016ec <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f2:	4bc3      	ldr	r3, [pc, #780]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2238      	movs	r2, #56	; 0x38
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015fc:	4bc0      	ldr	r3, [pc, #768]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2203      	movs	r2, #3
 8001602:	4013      	ands	r3, r2
 8001604:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b10      	cmp	r3, #16
 800160a:	d102      	bne.n	8001612 <HAL_RCC_OscConfig+0x3e>
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	2b03      	cmp	r3, #3
 8001610:	d002      	beq.n	8001618 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d10b      	bne.n	8001630 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	4bb9      	ldr	r3, [pc, #740]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	029b      	lsls	r3, r3, #10
 8001620:	4013      	ands	r3, r2
 8001622:	d062      	beq.n	80016ea <HAL_RCC_OscConfig+0x116>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d15e      	bne.n	80016ea <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e2d9      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	429a      	cmp	r2, r3
 800163a:	d107      	bne.n	800164c <HAL_RCC_OscConfig+0x78>
 800163c:	4bb0      	ldr	r3, [pc, #704]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4baf      	ldr	r3, [pc, #700]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001642:	2180      	movs	r1, #128	; 0x80
 8001644:	0249      	lsls	r1, r1, #9
 8001646:	430a      	orrs	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	e020      	b.n	800168e <HAL_RCC_OscConfig+0xba>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	23a0      	movs	r3, #160	; 0xa0
 8001652:	02db      	lsls	r3, r3, #11
 8001654:	429a      	cmp	r2, r3
 8001656:	d10e      	bne.n	8001676 <HAL_RCC_OscConfig+0xa2>
 8001658:	4ba9      	ldr	r3, [pc, #676]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4ba8      	ldr	r3, [pc, #672]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	02c9      	lsls	r1, r1, #11
 8001662:	430a      	orrs	r2, r1
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	4ba6      	ldr	r3, [pc, #664]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4ba5      	ldr	r3, [pc, #660]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	0249      	lsls	r1, r1, #9
 8001670:	430a      	orrs	r2, r1
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	e00b      	b.n	800168e <HAL_RCC_OscConfig+0xba>
 8001676:	4ba2      	ldr	r3, [pc, #648]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4ba1      	ldr	r3, [pc, #644]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 800167c:	49a1      	ldr	r1, [pc, #644]	; (8001904 <HAL_RCC_OscConfig+0x330>)
 800167e:	400a      	ands	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	4b9f      	ldr	r3, [pc, #636]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4b9e      	ldr	r3, [pc, #632]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001688:	499f      	ldr	r1, [pc, #636]	; (8001908 <HAL_RCC_OscConfig+0x334>)
 800168a:	400a      	ands	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d014      	beq.n	80016c0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fbf7 	bl	8000e88 <HAL_GetTick>
 800169a:	0003      	movs	r3, r0
 800169c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff fbf2 	bl	8000e88 <HAL_GetTick>
 80016a4:	0002      	movs	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e298      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b2:	4b93      	ldr	r3, [pc, #588]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	029b      	lsls	r3, r3, #10
 80016ba:	4013      	ands	r3, r2
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0xcc>
 80016be:	e015      	b.n	80016ec <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fbe2 	bl	8000e88 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ca:	f7ff fbdd 	bl	8000e88 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e283      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016dc:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	029b      	lsls	r3, r3, #10
 80016e4:	4013      	ands	r3, r2
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0xf6>
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2202      	movs	r2, #2
 80016f2:	4013      	ands	r3, r2
 80016f4:	d100      	bne.n	80016f8 <HAL_RCC_OscConfig+0x124>
 80016f6:	e099      	b.n	800182c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f8:	4b81      	ldr	r3, [pc, #516]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2238      	movs	r2, #56	; 0x38
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001702:	4b7f      	ldr	r3, [pc, #508]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2203      	movs	r2, #3
 8001708:	4013      	ands	r3, r2
 800170a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d102      	bne.n	8001718 <HAL_RCC_OscConfig+0x144>
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d002      	beq.n	800171e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d135      	bne.n	800178a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171e:	4b78      	ldr	r3, [pc, #480]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4013      	ands	r3, r2
 8001728:	d005      	beq.n	8001736 <HAL_RCC_OscConfig+0x162>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e256      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001736:	4b72      	ldr	r3, [pc, #456]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	4a74      	ldr	r2, [pc, #464]	; (800190c <HAL_RCC_OscConfig+0x338>)
 800173c:	4013      	ands	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	021a      	lsls	r2, r3, #8
 8001746:	4b6e      	ldr	r3, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d112      	bne.n	8001778 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001752:	4b6b      	ldr	r3, [pc, #428]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a6e      	ldr	r2, [pc, #440]	; (8001910 <HAL_RCC_OscConfig+0x33c>)
 8001758:	4013      	ands	r3, r2
 800175a:	0019      	movs	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	4b67      	ldr	r3, [pc, #412]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001766:	4b66      	ldr	r3, [pc, #408]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	0adb      	lsrs	r3, r3, #11
 800176c:	2207      	movs	r2, #7
 800176e:	4013      	ands	r3, r2
 8001770:	4a68      	ldr	r2, [pc, #416]	; (8001914 <HAL_RCC_OscConfig+0x340>)
 8001772:	40da      	lsrs	r2, r3
 8001774:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_RCC_OscConfig+0x344>)
 8001776:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x348>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fb27 	bl	8000dd0 <HAL_InitTick>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d051      	beq.n	800182a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e22c      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d030      	beq.n	80017f4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001792:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5e      	ldr	r2, [pc, #376]	; (8001910 <HAL_RCC_OscConfig+0x33c>)
 8001798:	4013      	ands	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	4b57      	ldr	r3, [pc, #348]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017a6:	4b56      	ldr	r3, [pc, #344]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b55      	ldr	r3, [pc, #340]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	0049      	lsls	r1, r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fb68 	bl	8000e88 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017be:	f7ff fb63 	bl	8000e88 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e209      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d0:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	4013      	ands	r3, r2
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b48      	ldr	r3, [pc, #288]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a4a      	ldr	r2, [pc, #296]	; (800190c <HAL_RCC_OscConfig+0x338>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	0019      	movs	r1, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	021a      	lsls	r2, r3, #8
 80017ec:	4b44      	ldr	r3, [pc, #272]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	e01b      	b.n	800182c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80017f4:	4b42      	ldr	r3, [pc, #264]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80017fa:	4949      	ldr	r1, [pc, #292]	; (8001920 <HAL_RCC_OscConfig+0x34c>)
 80017fc:	400a      	ands	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fb42 	bl	8000e88 <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180a:	f7ff fb3d 	bl	8000e88 <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e1e3      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800181c:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	4013      	ands	r3, r2
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0x236>
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2208      	movs	r2, #8
 8001832:	4013      	ands	r3, r2
 8001834:	d047      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001836:	4b32      	ldr	r3, [pc, #200]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	2238      	movs	r2, #56	; 0x38
 800183c:	4013      	ands	r3, r2
 800183e:	2b18      	cmp	r3, #24
 8001840:	d10a      	bne.n	8001858 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	2202      	movs	r2, #2
 8001848:	4013      	ands	r3, r2
 800184a:	d03c      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2f2>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d138      	bne.n	80018c6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e1c5      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d019      	beq.n	8001894 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001862:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001866:	2101      	movs	r1, #1
 8001868:	430a      	orrs	r2, r1
 800186a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fb0c 	bl	8000e88 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001876:	f7ff fb07 	bl	8000e88 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1ad      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	2202      	movs	r2, #2
 800188e:	4013      	ands	r3, r2
 8001890:	d0f1      	beq.n	8001876 <HAL_RCC_OscConfig+0x2a2>
 8001892:	e018      	b.n	80018c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001894:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 8001896:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 800189a:	2101      	movs	r1, #1
 800189c:	438a      	bics	r2, r1
 800189e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff faf2 	bl	8000e88 <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff faed 	bl	8000e88 <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e193      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80018be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c0:	2202      	movs	r2, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d1f1      	bne.n	80018aa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2204      	movs	r2, #4
 80018cc:	4013      	ands	r3, r2
 80018ce:	d100      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2fe>
 80018d0:	e0c6      	b.n	8001a60 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d2:	231f      	movs	r3, #31
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2238      	movs	r2, #56	; 0x38
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	d11e      	bne.n	8001924 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ea:	2202      	movs	r2, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d100      	bne.n	80018f2 <HAL_RCC_OscConfig+0x31e>
 80018f0:	e0b6      	b.n	8001a60 <HAL_RCC_OscConfig+0x48c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d000      	beq.n	80018fc <HAL_RCC_OscConfig+0x328>
 80018fa:	e0b1      	b.n	8001a60 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e171      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
 8001900:	40021000 	.word	0x40021000
 8001904:	fffeffff 	.word	0xfffeffff
 8001908:	fffbffff 	.word	0xfffbffff
 800190c:	ffff80ff 	.word	0xffff80ff
 8001910:	ffffc7ff 	.word	0xffffc7ff
 8001914:	00f42400 	.word	0x00f42400
 8001918:	20000000 	.word	0x20000000
 800191c:	20000004 	.word	0x20000004
 8001920:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001924:	4bb1      	ldr	r3, [pc, #708]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	055b      	lsls	r3, r3, #21
 800192c:	4013      	ands	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_RCC_OscConfig+0x360>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x362>
 8001934:	2300      	movs	r3, #0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d011      	beq.n	800195e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4bac      	ldr	r3, [pc, #688]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 800193c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800193e:	4bab      	ldr	r3, [pc, #684]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0549      	lsls	r1, r1, #21
 8001944:	430a      	orrs	r2, r1
 8001946:	63da      	str	r2, [r3, #60]	; 0x3c
 8001948:	4ba8      	ldr	r3, [pc, #672]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 800194a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	055b      	lsls	r3, r3, #21
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001956:	231f      	movs	r3, #31
 8001958:	18fb      	adds	r3, r7, r3
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195e:	4ba4      	ldr	r3, [pc, #656]	; (8001bf0 <HAL_RCC_OscConfig+0x61c>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4013      	ands	r3, r2
 8001968:	d11a      	bne.n	80019a0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800196a:	4ba1      	ldr	r3, [pc, #644]	; (8001bf0 <HAL_RCC_OscConfig+0x61c>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4ba0      	ldr	r3, [pc, #640]	; (8001bf0 <HAL_RCC_OscConfig+0x61c>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	0049      	lsls	r1, r1, #1
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001978:	f7ff fa86 	bl	8000e88 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001982:	f7ff fa81 	bl	8000e88 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e127      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001994:	4b96      	ldr	r3, [pc, #600]	; (8001bf0 <HAL_RCC_OscConfig+0x61c>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	4013      	ands	r3, r2
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3e2>
 80019a8:	4b90      	ldr	r3, [pc, #576]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ac:	4b8f      	ldr	r3, [pc, #572]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	430a      	orrs	r2, r1
 80019b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80019b4:	e01c      	b.n	80019f0 <HAL_RCC_OscConfig+0x41c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x404>
 80019be:	4b8b      	ldr	r3, [pc, #556]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c2:	4b8a      	ldr	r3, [pc, #552]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019c4:	2104      	movs	r1, #4
 80019c6:	430a      	orrs	r2, r1
 80019c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ca:	4b88      	ldr	r3, [pc, #544]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019ce:	4b87      	ldr	r3, [pc, #540]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	430a      	orrs	r2, r1
 80019d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80019d6:	e00b      	b.n	80019f0 <HAL_RCC_OscConfig+0x41c>
 80019d8:	4b84      	ldr	r3, [pc, #528]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019dc:	4b83      	ldr	r3, [pc, #524]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019de:	2101      	movs	r1, #1
 80019e0:	438a      	bics	r2, r1
 80019e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80019e4:	4b81      	ldr	r3, [pc, #516]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019e8:	4b80      	ldr	r3, [pc, #512]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 80019ea:	2104      	movs	r1, #4
 80019ec:	438a      	bics	r2, r1
 80019ee:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d014      	beq.n	8001a22 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff fa46 	bl	8000e88 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a00:	e009      	b.n	8001a16 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff fa41 	bl	8000e88 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	4a79      	ldr	r2, [pc, #484]	; (8001bf4 <HAL_RCC_OscConfig+0x620>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0e6      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a16:	4b75      	ldr	r3, [pc, #468]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x42e>
 8001a20:	e013      	b.n	8001a4a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a22:	f7ff fa31 	bl	8000e88 <HAL_GetTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2a:	e009      	b.n	8001a40 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2c:	f7ff fa2c 	bl	8000e88 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	4a6f      	ldr	r2, [pc, #444]	; (8001bf4 <HAL_RCC_OscConfig+0x620>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e0d1      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a40:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a44:	2202      	movs	r2, #2
 8001a46:	4013      	ands	r3, r2
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a4a:	231f      	movs	r3, #31
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d105      	bne.n	8001a60 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a54:	4b65      	ldr	r3, [pc, #404]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a58:	4b64      	ldr	r3, [pc, #400]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001a5a:	4967      	ldr	r1, [pc, #412]	; (8001bf8 <HAL_RCC_OscConfig+0x624>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x496>
 8001a68:	e0bb      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6a:	4b60      	ldr	r3, [pc, #384]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2238      	movs	r2, #56	; 0x38
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d100      	bne.n	8001a78 <HAL_RCC_OscConfig+0x4a4>
 8001a76:	e07b      	b.n	8001b70 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d156      	bne.n	8001b2e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b59      	ldr	r3, [pc, #356]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001a86:	495d      	ldr	r1, [pc, #372]	; (8001bfc <HAL_RCC_OscConfig+0x628>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f9fc 	bl	8000e88 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f9f7 	bl	8000e88 <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e09d      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa8:	4b50      	ldr	r3, [pc, #320]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	049b      	lsls	r3, r3, #18
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab4:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <HAL_RCC_OscConfig+0x62c>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	4b42      	ldr	r3, [pc, #264]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	0449      	lsls	r1, r1, #17
 8001af2:	430a      	orrs	r2, r1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	0549      	lsls	r1, r1, #21
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f9c0 	bl	8000e88 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7ff f9bb 	bl	8000e88 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e061      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	049b      	lsls	r3, r3, #18
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x53a>
 8001b2c:	e059      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b2e      	ldr	r3, [pc, #184]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001b34:	4931      	ldr	r1, [pc, #196]	; (8001bfc <HAL_RCC_OscConfig+0x628>)
 8001b36:	400a      	ands	r2, r1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f9a5 	bl	8000e88 <HAL_GetTick>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff f9a0 	bl	8000e88 <HAL_GetTick>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e046      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	049b      	lsls	r3, r3, #18
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001b68:	4926      	ldr	r1, [pc, #152]	; (8001c04 <HAL_RCC_OscConfig+0x630>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	e038      	b.n	8001be2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e033      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <HAL_RCC_OscConfig+0x618>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2203      	movs	r2, #3
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d126      	bne.n	8001bde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2270      	movs	r2, #112	; 0x70
 8001b94:	401a      	ands	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d11f      	bne.n	8001bde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	23fe      	movs	r3, #254	; 0xfe
 8001ba2:	01db      	lsls	r3, r3, #7
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d116      	bne.n	8001bde <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	23f8      	movs	r3, #248	; 0xf8
 8001bb4:	039b      	lsls	r3, r3, #14
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10e      	bne.n	8001bde <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	23e0      	movs	r3, #224	; 0xe0
 8001bc4:	051b      	lsls	r3, r3, #20
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d106      	bne.n	8001bde <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	0f5b      	lsrs	r3, r3, #29
 8001bd4:	075a      	lsls	r2, r3, #29
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d001      	beq.n	8001be2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	0018      	movs	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b008      	add	sp, #32
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	00001388 	.word	0x00001388
 8001bf8:	efffffff 	.word	0xefffffff
 8001bfc:	feffffff 	.word	0xfeffffff
 8001c00:	11c1808c 	.word	0x11c1808c
 8001c04:	eefefffc 	.word	0xeefefffc

08001c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0e9      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c1c:	4b76      	ldr	r3, [pc, #472]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2207      	movs	r2, #7
 8001c22:	4013      	ands	r3, r2
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d91e      	bls.n	8001c68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2207      	movs	r2, #7
 8001c30:	4393      	bics	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	4b70      	ldr	r3, [pc, #448]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f924 	bl	8000e88 <HAL_GetTick>
 8001c40:	0003      	movs	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c46:	f7ff f91f 	bl	8000e88 <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a6a      	ldr	r2, [pc, #424]	; (8001dfc <HAL_RCC_ClockConfig+0x1f4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0ca      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c5a:	4b67      	ldr	r3, [pc, #412]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2207      	movs	r2, #7
 8001c60:	4013      	ands	r3, r2
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1ee      	bne.n	8001c46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d015      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2204      	movs	r2, #4
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d006      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c7c:	4b60      	ldr	r3, [pc, #384]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001c82:	21e0      	movs	r1, #224	; 0xe0
 8001c84:	01c9      	lsls	r1, r1, #7
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8a:	4b5d      	ldr	r3, [pc, #372]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4a5d      	ldr	r2, [pc, #372]	; (8001e04 <HAL_RCC_ClockConfig+0x1fc>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d057      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	029b      	lsls	r3, r3, #10
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d12b      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e097      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d107      	bne.n	8001cd8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc8:	4b4d      	ldr	r3, [pc, #308]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	049b      	lsls	r3, r3, #18
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d11f      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e08b      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce0:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d113      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e07f      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cf8:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d108      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e074      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d06:	4b3e      	ldr	r3, [pc, #248]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e06d      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d14:	4b3a      	ldr	r3, [pc, #232]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2207      	movs	r2, #7
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001d24:	430a      	orrs	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d28:	f7ff f8ae 	bl	8000e88 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d30:	e009      	b.n	8001d46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d32:	f7ff f8a9 	bl	8000e88 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	4a2f      	ldr	r2, [pc, #188]	; (8001dfc <HAL_RCC_ClockConfig+0x1f4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e054      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2238      	movs	r2, #56	; 0x38
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1ec      	bne.n	8001d32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d58:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	4013      	ands	r3, r2
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d21e      	bcs.n	8001da4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	4393      	bics	r3, r2
 8001d6e:	0019      	movs	r1, r3
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d78:	f7ff f886 	bl	8000e88 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d80:	e009      	b.n	8001d96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7ff f881 	bl	8000e88 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <HAL_RCC_ClockConfig+0x1f4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e02c      	b.n	8001df0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d96:	4b18      	ldr	r3, [pc, #96]	; (8001df8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1ee      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2204      	movs	r2, #4
 8001daa:	4013      	ands	r3, r2
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <HAL_RCC_ClockConfig+0x200>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001dc2:	f000 f829 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8001dc6:	0001      	movs	r1, r0
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_RCC_ClockConfig+0x1f8>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	220f      	movs	r2, #15
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_RCC_ClockConfig+0x204>)
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	58d3      	ldr	r3, [r2, r3]
 8001dd8:	221f      	movs	r2, #31
 8001dda:	4013      	ands	r3, r2
 8001ddc:	000a      	movs	r2, r1
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_ClockConfig+0x208>)
 8001de2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_ClockConfig+0x20c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7fe fff1 	bl	8000dd0 <HAL_InitTick>
 8001dee:	0003      	movs	r3, r0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	00001388 	.word	0x00001388
 8001e00:	40021000 	.word	0x40021000
 8001e04:	fffff0ff 	.word	0xfffff0ff
 8001e08:	ffff8fff 	.word	0xffff8fff
 8001e0c:	080048f4 	.word	0x080048f4
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1e:	4b3c      	ldr	r3, [pc, #240]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2238      	movs	r2, #56	; 0x38
 8001e24:	4013      	ands	r3, r2
 8001e26:	d10f      	bne.n	8001e48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e28:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	0adb      	lsrs	r3, r3, #11
 8001e2e:	2207      	movs	r2, #7
 8001e30:	4013      	ands	r3, r2
 8001e32:	2201      	movs	r2, #1
 8001e34:	409a      	lsls	r2, r3
 8001e36:	0013      	movs	r3, r2
 8001e38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e3a:	6839      	ldr	r1, [r7, #0]
 8001e3c:	4835      	ldr	r0, [pc, #212]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e3e:	f7fe f96b 	bl	8000118 <__udivsi3>
 8001e42:	0003      	movs	r3, r0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	e05d      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e48:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2238      	movs	r2, #56	; 0x38
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e54:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	e054      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5a:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2238      	movs	r2, #56	; 0x38
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d138      	bne.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e66:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	2207      	movs	r2, #7
 8001e78:	4013      	ands	r3, r2
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d10d      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e84:	68b9      	ldr	r1, [r7, #8]
 8001e86:	4824      	ldr	r0, [pc, #144]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001e88:	f7fe f946 	bl	8000118 <__udivsi3>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	0019      	movs	r1, r3
 8001e90:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	227f      	movs	r2, #127	; 0x7f
 8001e98:	4013      	ands	r3, r2
 8001e9a:	434b      	muls	r3, r1
 8001e9c:	617b      	str	r3, [r7, #20]
        break;
 8001e9e:	e00d      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	481c      	ldr	r0, [pc, #112]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ea4:	f7fe f938 	bl	8000118 <__udivsi3>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	0019      	movs	r1, r3
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	227f      	movs	r2, #127	; 0x7f
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	434b      	muls	r3, r1
 8001eb8:	617b      	str	r3, [r7, #20]
        break;
 8001eba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	0f5b      	lsrs	r3, r3, #29
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	6978      	ldr	r0, [r7, #20]
 8001ece:	f7fe f923 	bl	8000118 <__udivsi3>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	e015      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2238      	movs	r2, #56	; 0x38
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	d103      	bne.n	8001eec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	2238      	movs	r2, #56	; 0x38
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b18      	cmp	r3, #24
 8001ef6:	d103      	bne.n	8001f00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001ef8:	23fa      	movs	r3, #250	; 0xfa
 8001efa:	01db      	lsls	r3, r3, #7
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	e001      	b.n	8001f04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f04:	693b      	ldr	r3, [r7, #16]
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b006      	add	sp, #24
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	40021000 	.word	0x40021000
 8001f14:	00f42400 	.word	0x00f42400
 8001f18:	007a1200 	.word	0x007a1200

08001f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	20000000 	.word	0x20000000

08001f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f34:	f7ff fff2 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f38:	0004      	movs	r4, r0
 8001f3a:	f7ff fb3f 	bl	80015bc <LL_RCC_GetAPB1Prescaler>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	0b1a      	lsrs	r2, r3, #12
 8001f42:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	58d3      	ldr	r3, [r2, r3]
 8001f48:	221f      	movs	r2, #31
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	40dc      	lsrs	r4, r3
 8001f4e:	0023      	movs	r3, r4
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bdb0      	pop	{r4, r5, r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	08004934 	.word	0x08004934

08001f5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f64:	2313      	movs	r3, #19
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f6c:	2312      	movs	r3, #18
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	; 0x80
 8001f7a:	029b      	lsls	r3, r3, #10
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d100      	bne.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f80:	e0a3      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f82:	2011      	movs	r0, #17
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8a:	4ba5      	ldr	r3, [pc, #660]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	055b      	lsls	r3, r3, #21
 8001f92:	4013      	ands	r3, r2
 8001f94:	d110      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4ba2      	ldr	r3, [pc, #648]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f9a:	4ba1      	ldr	r3, [pc, #644]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f9c:	2180      	movs	r1, #128	; 0x80
 8001f9e:	0549      	lsls	r1, r1, #21
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fa4:	4b9e      	ldr	r3, [pc, #632]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	055b      	lsls	r3, r3, #21
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb2:	183b      	adds	r3, r7, r0
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fb8:	4b9a      	ldr	r3, [pc, #616]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b99      	ldr	r3, [pc, #612]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	0049      	lsls	r1, r1, #1
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fc6:	f7fe ff5f 	bl	8000e88 <HAL_GetTick>
 8001fca:	0003      	movs	r3, r0
 8001fcc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7fe ff5a 	bl	8000e88 <HAL_GetTick>
 8001fd4:	0002      	movs	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d904      	bls.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001fde:	2313      	movs	r3, #19
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	701a      	strb	r2, [r3, #0]
        break;
 8001fe6:	e005      	b.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fe8:	4b8e      	ldr	r3, [pc, #568]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d0ed      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ff4:	2313      	movs	r3, #19
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d154      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ffe:	4b88      	ldr	r3, [pc, #544]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002000:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002002:	23c0      	movs	r3, #192	; 0xc0
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4013      	ands	r3, r2
 8002008:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d019      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	429a      	cmp	r2, r3
 8002018:	d014      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800201a:	4b81      	ldr	r3, [pc, #516]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800201c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201e:	4a82      	ldr	r2, [pc, #520]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002020:	4013      	ands	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002024:	4b7e      	ldr	r3, [pc, #504]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002026:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002028:	4b7d      	ldr	r3, [pc, #500]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	0249      	lsls	r1, r1, #9
 800202e:	430a      	orrs	r2, r1
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002032:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002034:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002036:	4b7a      	ldr	r3, [pc, #488]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002038:	497c      	ldr	r1, [pc, #496]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800203a:	400a      	ands	r2, r1
 800203c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800203e:	4b78      	ldr	r3, [pc, #480]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2201      	movs	r2, #1
 8002048:	4013      	ands	r3, r2
 800204a:	d016      	beq.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe ff1c 	bl	8000e88 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002054:	e00c      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7fe ff17 	bl	8000e88 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	4a73      	ldr	r2, [pc, #460]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d904      	bls.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002066:	2313      	movs	r3, #19
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	2203      	movs	r2, #3
 800206c:	701a      	strb	r2, [r3, #0]
            break;
 800206e:	e004      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002070:	4b6b      	ldr	r3, [pc, #428]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d0ed      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800207a:	2313      	movs	r3, #19
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002084:	4b66      	ldr	r3, [pc, #408]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	4a67      	ldr	r2, [pc, #412]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800208a:	4013      	ands	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002094:	430a      	orrs	r2, r1
 8002096:	65da      	str	r2, [r3, #92]	; 0x5c
 8002098:	e00c      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800209a:	2312      	movs	r3, #18
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	2213      	movs	r2, #19
 80020a0:	18ba      	adds	r2, r7, r2
 80020a2:	7812      	ldrb	r2, [r2, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	e005      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a8:	2312      	movs	r3, #18
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2213      	movs	r2, #19
 80020ae:	18ba      	adds	r2, r7, r2
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020b4:	2311      	movs	r3, #17
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d105      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020be:	4b58      	ldr	r3, [pc, #352]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c2:	4b57      	ldr	r3, [pc, #348]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020c4:	495b      	ldr	r1, [pc, #364]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80020c6:	400a      	ands	r2, r1
 80020c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2201      	movs	r2, #1
 80020d0:	4013      	ands	r3, r2
 80020d2:	d009      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d4:	4b52      	ldr	r3, [pc, #328]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	2203      	movs	r2, #3
 80020da:	4393      	bics	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4b4f      	ldr	r3, [pc, #316]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020e4:	430a      	orrs	r2, r1
 80020e6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2210      	movs	r2, #16
 80020ee:	4013      	ands	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f2:	4b4b      	ldr	r3, [pc, #300]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	4a50      	ldr	r2, [pc, #320]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	0019      	movs	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002102:	430a      	orrs	r2, r1
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002112:	4b43      	ldr	r3, [pc, #268]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	4a49      	ldr	r2, [pc, #292]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002118:	4013      	ands	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	4b3f      	ldr	r3, [pc, #252]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002122:	430a      	orrs	r2, r1
 8002124:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	2380      	movs	r3, #128	; 0x80
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	4013      	ands	r3, r2
 8002130:	d009      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002132:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	4a42      	ldr	r2, [pc, #264]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002138:	4013      	ands	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699a      	ldr	r2, [r3, #24]
 8002140:	4b37      	ldr	r3, [pc, #220]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002142:	430a      	orrs	r2, r1
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2220      	movs	r2, #32
 800214c:	4013      	ands	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002150:	4b33      	ldr	r3, [pc, #204]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002154:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002156:	4013      	ands	r3, r2
 8002158:	0019      	movs	r1, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002160:	430a      	orrs	r2, r1
 8002162:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	01db      	lsls	r3, r3, #7
 800216c:	4013      	ands	r3, r2
 800216e:	d015      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	0899      	lsrs	r1, r3, #2
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	4b28      	ldr	r3, [pc, #160]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800217e:	430a      	orrs	r2, r1
 8002180:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	05db      	lsls	r3, r3, #23
 800218a:	429a      	cmp	r2, r3
 800218c:	d106      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0249      	lsls	r1, r1, #9
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	039b      	lsls	r3, r3, #14
 80021a4:	4013      	ands	r3, r2
 80021a6:	d016      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ac:	4a26      	ldr	r2, [pc, #152]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	0019      	movs	r1, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021b8:	430a      	orrs	r2, r1
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1a      	ldr	r2, [r3, #32]
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	03db      	lsls	r3, r3, #15
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d106      	bne.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	0449      	lsls	r1, r1, #17
 80021d2:	430a      	orrs	r2, r1
 80021d4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	4013      	ands	r3, r2
 80021e0:	d016      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e6:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021f2:	430a      	orrs	r2, r1
 80021f4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	01db      	lsls	r3, r3, #7
 80021fe:	429a      	cmp	r2, r3
 8002200:	d106      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002208:	2180      	movs	r1, #128	; 0x80
 800220a:	0249      	lsls	r1, r1, #9
 800220c:	430a      	orrs	r2, r1
 800220e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002210:	2312      	movs	r3, #18
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	781b      	ldrb	r3, [r3, #0]
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b006      	add	sp, #24
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	40021000 	.word	0x40021000
 8002224:	40007000 	.word	0x40007000
 8002228:	fffffcff 	.word	0xfffffcff
 800222c:	fffeffff 	.word	0xfffeffff
 8002230:	00001388 	.word	0x00001388
 8002234:	efffffff 	.word	0xefffffff
 8002238:	fffff3ff 	.word	0xfffff3ff
 800223c:	fff3ffff 	.word	0xfff3ffff
 8002240:	ffcfffff 	.word	0xffcfffff
 8002244:	ffffcfff 	.word	0xffffcfff
 8002248:	ffbfffff 	.word	0xffbfffff
 800224c:	ffff3fff 	.word	0xffff3fff

08002250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e046      	b.n	80022f0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2288      	movs	r2, #136	; 0x88
 8002266:	589b      	ldr	r3, [r3, r2]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2284      	movs	r2, #132	; 0x84
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	0018      	movs	r0, r3
 8002278:	f7fe fbf4 	bl	8000a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2288      	movs	r2, #136	; 0x88
 8002280:	2124      	movs	r1, #36	; 0x24
 8002282:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2101      	movs	r1, #1
 8002290:	438a      	bics	r2, r1
 8002292:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0018      	movs	r0, r3
 8002298:	f000 fc0e 	bl	8002ab8 <UART_SetConfig>
 800229c:	0003      	movs	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d101      	bne.n	80022a6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e024      	b.n	80022f0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 fe79 	bl	8002fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	490d      	ldr	r1, [pc, #52]	; (80022f8 <HAL_UART_Init+0xa8>)
 80022c2:	400a      	ands	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	212a      	movs	r1, #42	; 0x2a
 80022d2:	438a      	bics	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2101      	movs	r1, #1
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	0018      	movs	r0, r3
 80022ea:	f000 ff11 	bl	8003110 <UART_CheckIdleState>
 80022ee:	0003      	movs	r3, r0
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	ffffb7ff 	.word	0xffffb7ff

080022fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af02      	add	r7, sp, #8
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	1dbb      	adds	r3, r7, #6
 800230a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2288      	movs	r2, #136	; 0x88
 8002310:	589b      	ldr	r3, [r3, r2]
 8002312:	2b20      	cmp	r3, #32
 8002314:	d000      	beq.n	8002318 <HAL_UART_Transmit+0x1c>
 8002316:	e088      	b.n	800242a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_UART_Transmit+0x2a>
 800231e:	1dbb      	adds	r3, r7, #6
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e080      	b.n	800242c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	015b      	lsls	r3, r3, #5
 8002332:	429a      	cmp	r2, r3
 8002334:	d109      	bne.n	800234a <HAL_UART_Transmit+0x4e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d105      	bne.n	800234a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	d001      	beq.n	800234a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e070      	b.n	800242c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2290      	movs	r2, #144	; 0x90
 800234e:	2100      	movs	r1, #0
 8002350:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2288      	movs	r2, #136	; 0x88
 8002356:	2121      	movs	r1, #33	; 0x21
 8002358:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800235a:	f7fe fd95 	bl	8000e88 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1dba      	adds	r2, r7, #6
 8002366:	2154      	movs	r1, #84	; 0x54
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1dba      	adds	r2, r7, #6
 8002370:	2156      	movs	r1, #86	; 0x56
 8002372:	8812      	ldrh	r2, [r2, #0]
 8002374:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	015b      	lsls	r3, r3, #5
 800237e:	429a      	cmp	r2, r3
 8002380:	d108      	bne.n	8002394 <HAL_UART_Transmit+0x98>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e003      	b.n	800239c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800239c:	e02c      	b.n	80023f8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	0013      	movs	r3, r2
 80023a8:	2200      	movs	r2, #0
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	f000 fefe 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 80023b0:	1e03      	subs	r3, r0, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e039      	b.n	800242c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10b      	bne.n	80023d6 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	001a      	movs	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	05d2      	lsls	r2, r2, #23
 80023ca:	0dd2      	lsrs	r2, r2, #23
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	3302      	adds	r3, #2
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e007      	b.n	80023e6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	3301      	adds	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2256      	movs	r2, #86	; 0x56
 80023ea:	5a9b      	ldrh	r3, [r3, r2]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b299      	uxth	r1, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2256      	movs	r2, #86	; 0x56
 80023f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2256      	movs	r2, #86	; 0x56
 80023fc:	5a9b      	ldrh	r3, [r3, r2]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1cc      	bne.n	800239e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	0013      	movs	r3, r2
 800240e:	2200      	movs	r2, #0
 8002410:	2140      	movs	r1, #64	; 0x40
 8002412:	f000 fecb 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8002416:	1e03      	subs	r3, r0, #0
 8002418:	d001      	beq.n	800241e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e006      	b.n	800242c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2288      	movs	r2, #136	; 0x88
 8002422:	2120      	movs	r1, #32
 8002424:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e000      	b.n	800242c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
  }
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b008      	add	sp, #32
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002434:	b5b0      	push	{r4, r5, r7, lr}
 8002436:	b0aa      	sub	sp, #168	; 0xa8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	22a4      	movs	r2, #164	; 0xa4
 8002444:	18b9      	adds	r1, r7, r2
 8002446:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	20a0      	movs	r0, #160	; 0xa0
 8002450:	1839      	adds	r1, r7, r0
 8002452:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	249c      	movs	r4, #156	; 0x9c
 800245c:	1939      	adds	r1, r7, r4
 800245e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002460:	0011      	movs	r1, r2
 8002462:	18bb      	adds	r3, r7, r2
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4aa2      	ldr	r2, [pc, #648]	; (80026f0 <HAL_UART_IRQHandler+0x2bc>)
 8002468:	4013      	ands	r3, r2
 800246a:	2298      	movs	r2, #152	; 0x98
 800246c:	18bd      	adds	r5, r7, r2
 800246e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002470:	18bb      	adds	r3, r7, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d11a      	bne.n	80024ae <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002478:	187b      	adds	r3, r7, r1
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2220      	movs	r2, #32
 800247e:	4013      	ands	r3, r2
 8002480:	d015      	beq.n	80024ae <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002482:	183b      	adds	r3, r7, r0
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2220      	movs	r2, #32
 8002488:	4013      	ands	r3, r2
 800248a:	d105      	bne.n	8002498 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800248c:	193b      	adds	r3, r7, r4
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	055b      	lsls	r3, r3, #21
 8002494:	4013      	ands	r3, r2
 8002496:	d00a      	beq.n	80024ae <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249c:	2b00      	cmp	r3, #0
 800249e:	d100      	bne.n	80024a2 <HAL_UART_IRQHandler+0x6e>
 80024a0:	e2dc      	b.n	8002a5c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	0010      	movs	r0, r2
 80024aa:	4798      	blx	r3
      }
      return;
 80024ac:	e2d6      	b.n	8002a5c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80024ae:	2398      	movs	r3, #152	; 0x98
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d100      	bne.n	80024ba <HAL_UART_IRQHandler+0x86>
 80024b8:	e122      	b.n	8002700 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80024ba:	239c      	movs	r3, #156	; 0x9c
 80024bc:	18fb      	adds	r3, r7, r3
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a8c      	ldr	r2, [pc, #560]	; (80026f4 <HAL_UART_IRQHandler+0x2c0>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	d106      	bne.n	80024d4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80024c6:	23a0      	movs	r3, #160	; 0xa0
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a8a      	ldr	r2, [pc, #552]	; (80026f8 <HAL_UART_IRQHandler+0x2c4>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	d100      	bne.n	80024d4 <HAL_UART_IRQHandler+0xa0>
 80024d2:	e115      	b.n	8002700 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80024d4:	23a4      	movs	r3, #164	; 0xa4
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	4013      	ands	r3, r2
 80024de:	d012      	beq.n	8002506 <HAL_UART_IRQHandler+0xd2>
 80024e0:	23a0      	movs	r3, #160	; 0xa0
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	d00b      	beq.n	8002506 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2290      	movs	r2, #144	; 0x90
 80024fa:	589b      	ldr	r3, [r3, r2]
 80024fc:	2201      	movs	r2, #1
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2190      	movs	r1, #144	; 0x90
 8002504:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002506:	23a4      	movs	r3, #164	; 0xa4
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2202      	movs	r2, #2
 800250e:	4013      	ands	r3, r2
 8002510:	d011      	beq.n	8002536 <HAL_UART_IRQHandler+0x102>
 8002512:	239c      	movs	r3, #156	; 0x9c
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	4013      	ands	r3, r2
 800251c:	d00b      	beq.n	8002536 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2202      	movs	r2, #2
 8002524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2290      	movs	r2, #144	; 0x90
 800252a:	589b      	ldr	r3, [r3, r2]
 800252c:	2204      	movs	r2, #4
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2190      	movs	r1, #144	; 0x90
 8002534:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002536:	23a4      	movs	r3, #164	; 0xa4
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2204      	movs	r2, #4
 800253e:	4013      	ands	r3, r2
 8002540:	d011      	beq.n	8002566 <HAL_UART_IRQHandler+0x132>
 8002542:	239c      	movs	r3, #156	; 0x9c
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	d00b      	beq.n	8002566 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2290      	movs	r2, #144	; 0x90
 800255a:	589b      	ldr	r3, [r3, r2]
 800255c:	2202      	movs	r2, #2
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2190      	movs	r1, #144	; 0x90
 8002564:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002566:	23a4      	movs	r3, #164	; 0xa4
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2208      	movs	r2, #8
 800256e:	4013      	ands	r3, r2
 8002570:	d017      	beq.n	80025a2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002572:	23a0      	movs	r3, #160	; 0xa0
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2220      	movs	r2, #32
 800257a:	4013      	ands	r3, r2
 800257c:	d105      	bne.n	800258a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800257e:	239c      	movs	r3, #156	; 0x9c
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5b      	ldr	r2, [pc, #364]	; (80026f4 <HAL_UART_IRQHandler+0x2c0>)
 8002586:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002588:	d00b      	beq.n	80025a2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2208      	movs	r2, #8
 8002590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2290      	movs	r2, #144	; 0x90
 8002596:	589b      	ldr	r3, [r3, r2]
 8002598:	2208      	movs	r2, #8
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2190      	movs	r1, #144	; 0x90
 80025a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025a2:	23a4      	movs	r3, #164	; 0xa4
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	4013      	ands	r3, r2
 80025ae:	d013      	beq.n	80025d8 <HAL_UART_IRQHandler+0x1a4>
 80025b0:	23a0      	movs	r3, #160	; 0xa0
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	04db      	lsls	r3, r3, #19
 80025ba:	4013      	ands	r3, r2
 80025bc:	d00c      	beq.n	80025d8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2290      	movs	r2, #144	; 0x90
 80025cc:	589b      	ldr	r3, [r3, r2]
 80025ce:	2220      	movs	r2, #32
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2190      	movs	r1, #144	; 0x90
 80025d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2290      	movs	r2, #144	; 0x90
 80025dc:	589b      	ldr	r3, [r3, r2]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d100      	bne.n	80025e4 <HAL_UART_IRQHandler+0x1b0>
 80025e2:	e23d      	b.n	8002a60 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025e4:	23a4      	movs	r3, #164	; 0xa4
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2220      	movs	r2, #32
 80025ec:	4013      	ands	r3, r2
 80025ee:	d015      	beq.n	800261c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80025f0:	23a0      	movs	r3, #160	; 0xa0
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2220      	movs	r2, #32
 80025f8:	4013      	ands	r3, r2
 80025fa:	d106      	bne.n	800260a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80025fc:	239c      	movs	r3, #156	; 0x9c
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	055b      	lsls	r3, r3, #21
 8002606:	4013      	ands	r3, r2
 8002608:	d008      	beq.n	800261c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	0010      	movs	r0, r2
 800261a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2290      	movs	r2, #144	; 0x90
 8002620:	589b      	ldr	r3, [r3, r2]
 8002622:	2194      	movs	r1, #148	; 0x94
 8002624:	187a      	adds	r2, r7, r1
 8002626:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2240      	movs	r2, #64	; 0x40
 8002630:	4013      	ands	r3, r2
 8002632:	2b40      	cmp	r3, #64	; 0x40
 8002634:	d004      	beq.n	8002640 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002636:	187b      	adds	r3, r7, r1
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2228      	movs	r2, #40	; 0x28
 800263c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800263e:	d04c      	beq.n	80026da <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f000 fe7a 	bl	800333c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	4013      	ands	r3, r2
 8002652:	2b40      	cmp	r3, #64	; 0x40
 8002654:	d13c      	bne.n	80026d0 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002656:	f3ef 8310 	mrs	r3, PRIMASK
 800265a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800265c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800265e:	2090      	movs	r0, #144	; 0x90
 8002660:	183a      	adds	r2, r7, r0
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2140      	movs	r1, #64	; 0x40
 800267c:	438a      	bics	r2, r1
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	183b      	adds	r3, r7, r0
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002686:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002688:	f383 8810 	msr	PRIMASK, r3
}
 800268c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	589b      	ldr	r3, [r3, r2]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d016      	beq.n	80026c6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	589b      	ldr	r3, [r3, r2]
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <HAL_UART_IRQHandler+0x2c8>)
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	589b      	ldr	r3, [r3, r2]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7fe fd5b 	bl	8001164 <HAL_DMA_Abort_IT>
 80026ae:	1e03      	subs	r3, r0, #0
 80026b0:	d01c      	beq.n	80026ec <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	; 0x80
 80026b6:	589b      	ldr	r3, [r3, r2]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	5852      	ldr	r2, [r2, r1]
 80026c0:	0010      	movs	r0, r2
 80026c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c4:	e012      	b.n	80026ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 f9e1 	bl	8002a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ce:	e00d      	b.n	80026ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f000 f9dc 	bl	8002a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e008      	b.n	80026ec <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 f9d7 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2290      	movs	r2, #144	; 0x90
 80026e6:	2100      	movs	r1, #0
 80026e8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80026ea:	e1b9      	b.n	8002a60 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	46c0      	nop			; (mov r8, r8)
    return;
 80026ee:	e1b7      	b.n	8002a60 <HAL_UART_IRQHandler+0x62c>
 80026f0:	0000080f 	.word	0x0000080f
 80026f4:	10000001 	.word	0x10000001
 80026f8:	04000120 	.word	0x04000120
 80026fc:	08003409 	.word	0x08003409

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d000      	beq.n	800270a <HAL_UART_IRQHandler+0x2d6>
 8002708:	e13e      	b.n	8002988 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800270a:	23a4      	movs	r3, #164	; 0xa4
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2210      	movs	r2, #16
 8002712:	4013      	ands	r3, r2
 8002714:	d100      	bne.n	8002718 <HAL_UART_IRQHandler+0x2e4>
 8002716:	e137      	b.n	8002988 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002718:	23a0      	movs	r3, #160	; 0xa0
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2210      	movs	r2, #16
 8002720:	4013      	ands	r3, r2
 8002722:	d100      	bne.n	8002726 <HAL_UART_IRQHandler+0x2f2>
 8002724:	e130      	b.n	8002988 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2210      	movs	r2, #16
 800272c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2240      	movs	r2, #64	; 0x40
 8002736:	4013      	ands	r3, r2
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d000      	beq.n	800273e <HAL_UART_IRQHandler+0x30a>
 800273c:	e0a4      	b.n	8002888 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2280      	movs	r2, #128	; 0x80
 8002742:	589b      	ldr	r3, [r3, r2]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	217e      	movs	r1, #126	; 0x7e
 800274a:	187b      	adds	r3, r7, r1
 800274c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800274e:	187b      	adds	r3, r7, r1
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d100      	bne.n	8002758 <HAL_UART_IRQHandler+0x324>
 8002756:	e185      	b.n	8002a64 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	225c      	movs	r2, #92	; 0x5c
 800275c:	5a9b      	ldrh	r3, [r3, r2]
 800275e:	187a      	adds	r2, r7, r1
 8002760:	8812      	ldrh	r2, [r2, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d300      	bcc.n	8002768 <HAL_UART_IRQHandler+0x334>
 8002766:	e17d      	b.n	8002a64 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	187a      	adds	r2, r7, r1
 800276c:	215e      	movs	r1, #94	; 0x5e
 800276e:	8812      	ldrh	r2, [r2, #0]
 8002770:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	589b      	ldr	r3, [r3, r2]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	4013      	ands	r3, r2
 8002780:	d170      	bne.n	8002864 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002782:	f3ef 8310 	mrs	r3, PRIMASK
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800278a:	67bb      	str	r3, [r7, #120]	; 0x78
 800278c:	2301      	movs	r3, #1
 800278e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002792:	f383 8810 	msr	PRIMASK, r3
}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	49b4      	ldr	r1, [pc, #720]	; (8002a74 <HAL_UART_IRQHandler+0x640>)
 80027a4:	400a      	ands	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ae:	f383 8810 	msr	PRIMASK, r3
}
 80027b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027b4:	f3ef 8310 	mrs	r3, PRIMASK
 80027b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027bc:	677b      	str	r3, [r7, #116]	; 0x74
 80027be:	2301      	movs	r3, #1
 80027c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027c4:	f383 8810 	msr	PRIMASK, r3
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	438a      	bics	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e0:	f383 8810 	msr	PRIMASK, r3
}
 80027e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e6:	f3ef 8310 	mrs	r3, PRIMASK
 80027ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80027ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ee:	673b      	str	r3, [r7, #112]	; 0x70
 80027f0:	2301      	movs	r3, #1
 80027f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f6:	f383 8810 	msr	PRIMASK, r3
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2140      	movs	r1, #64	; 0x40
 8002808:	438a      	bics	r2, r1
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002812:	f383 8810 	msr	PRIMASK, r3
}
 8002816:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	228c      	movs	r2, #140	; 0x8c
 800281c:	2120      	movs	r1, #32
 800281e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002826:	f3ef 8310 	mrs	r3, PRIMASK
 800282a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800282e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002830:	2301      	movs	r3, #1
 8002832:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002836:	f383 8810 	msr	PRIMASK, r3
}
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2110      	movs	r1, #16
 8002848:	438a      	bics	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002852:	f383 8810 	msr	PRIMASK, r3
}
 8002856:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	589b      	ldr	r3, [r3, r2]
 800285e:	0018      	movs	r0, r3
 8002860:	f7fe fc1e 	bl	80010a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	225c      	movs	r2, #92	; 0x5c
 800286e:	5a9a      	ldrh	r2, [r3, r2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	215e      	movs	r1, #94	; 0x5e
 8002874:	5a5b      	ldrh	r3, [r3, r1]
 8002876:	b29b      	uxth	r3, r3
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	b29a      	uxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0011      	movs	r1, r2
 8002880:	0018      	movs	r0, r3
 8002882:	f000 f90d 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002886:	e0ed      	b.n	8002a64 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	225c      	movs	r2, #92	; 0x5c
 800288c:	5a99      	ldrh	r1, [r3, r2]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	225e      	movs	r2, #94	; 0x5e
 8002892:	5a9b      	ldrh	r3, [r3, r2]
 8002894:	b29a      	uxth	r2, r3
 8002896:	208e      	movs	r0, #142	; 0x8e
 8002898:	183b      	adds	r3, r7, r0
 800289a:	1a8a      	subs	r2, r1, r2
 800289c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	225e      	movs	r2, #94	; 0x5e
 80028a2:	5a9b      	ldrh	r3, [r3, r2]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d100      	bne.n	80028ac <HAL_UART_IRQHandler+0x478>
 80028aa:	e0dd      	b.n	8002a68 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80028ac:	183b      	adds	r3, r7, r0
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d100      	bne.n	80028b6 <HAL_UART_IRQHandler+0x482>
 80028b4:	e0d8      	b.n	8002a68 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80028bc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028be:	2488      	movs	r4, #136	; 0x88
 80028c0:	193a      	adds	r2, r7, r4
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	2301      	movs	r3, #1
 80028c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f383 8810 	msr	PRIMASK, r3
}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4967      	ldr	r1, [pc, #412]	; (8002a78 <HAL_UART_IRQHandler+0x644>)
 80028dc:	400a      	ands	r2, r1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f383 8810 	msr	PRIMASK, r3
}
 80028ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ee:	f3ef 8310 	mrs	r3, PRIMASK
 80028f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80028f4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80028f6:	2484      	movs	r4, #132	; 0x84
 80028f8:	193a      	adds	r2, r7, r4
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	2301      	movs	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f383 8810 	msr	PRIMASK, r3
}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	495a      	ldr	r1, [pc, #360]	; (8002a7c <HAL_UART_IRQHandler+0x648>)
 8002914:	400a      	ands	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	193b      	adds	r3, r7, r4
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f383 8810 	msr	PRIMASK, r3
}
 8002924:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	228c      	movs	r2, #140	; 0x8c
 800292a:	2120      	movs	r1, #32
 800292c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293a:	f3ef 8310 	mrs	r3, PRIMASK
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002942:	2480      	movs	r4, #128	; 0x80
 8002944:	193a      	adds	r2, r7, r4
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	2301      	movs	r3, #1
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	f383 8810 	msr	PRIMASK, r3
}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2110      	movs	r1, #16
 8002960:	438a      	bics	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	193b      	adds	r3, r7, r4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	f383 8810 	msr	PRIMASK, r3
}
 8002970:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002978:	183b      	adds	r3, r7, r0
 800297a:	881a      	ldrh	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	0011      	movs	r1, r2
 8002980:	0018      	movs	r0, r3
 8002982:	f000 f88d 	bl	8002aa0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002986:	e06f      	b.n	8002a68 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002988:	23a4      	movs	r3, #164	; 0xa4
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	035b      	lsls	r3, r3, #13
 8002992:	4013      	ands	r3, r2
 8002994:	d010      	beq.n	80029b8 <HAL_UART_IRQHandler+0x584>
 8002996:	239c      	movs	r3, #156	; 0x9c
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	03db      	lsls	r3, r3, #15
 80029a0:	4013      	ands	r3, r2
 80029a2:	d009      	beq.n	80029b8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2280      	movs	r2, #128	; 0x80
 80029aa:	0352      	lsls	r2, r2, #13
 80029ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 fd6c 	bl	800348e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029b6:	e05a      	b.n	8002a6e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80029b8:	23a4      	movs	r3, #164	; 0xa4
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	4013      	ands	r3, r2
 80029c2:	d016      	beq.n	80029f2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80029c4:	23a0      	movs	r3, #160	; 0xa0
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	4013      	ands	r3, r2
 80029ce:	d106      	bne.n	80029de <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80029d0:	239c      	movs	r3, #156	; 0x9c
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	4013      	ands	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d042      	beq.n	8002a6c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	0010      	movs	r0, r2
 80029ee:	4798      	blx	r3
    }
    return;
 80029f0:	e03c      	b.n	8002a6c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80029f2:	23a4      	movs	r3, #164	; 0xa4
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2240      	movs	r2, #64	; 0x40
 80029fa:	4013      	ands	r3, r2
 80029fc:	d00a      	beq.n	8002a14 <HAL_UART_IRQHandler+0x5e0>
 80029fe:	23a0      	movs	r3, #160	; 0xa0
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	4013      	ands	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 fd12 	bl	8003436 <UART_EndTransmit_IT>
    return;
 8002a12:	e02c      	b.n	8002a6e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002a14:	23a4      	movs	r3, #164	; 0xa4
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	2380      	movs	r3, #128	; 0x80
 8002a1c:	041b      	lsls	r3, r3, #16
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <HAL_UART_IRQHandler+0x606>
 8002a22:	23a0      	movs	r3, #160	; 0xa0
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	05db      	lsls	r3, r3, #23
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d004      	beq.n	8002a3a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 fd3b 	bl	80034ae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a38:	e019      	b.n	8002a6e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002a3a:	23a4      	movs	r3, #164	; 0xa4
 8002a3c:	18fb      	adds	r3, r7, r3
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	045b      	lsls	r3, r3, #17
 8002a44:	4013      	ands	r3, r2
 8002a46:	d012      	beq.n	8002a6e <HAL_UART_IRQHandler+0x63a>
 8002a48:	23a0      	movs	r3, #160	; 0xa0
 8002a4a:	18fb      	adds	r3, r7, r3
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	da0d      	bge.n	8002a6e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	0018      	movs	r0, r3
 8002a56:	f000 fd22 	bl	800349e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a5a:	e008      	b.n	8002a6e <HAL_UART_IRQHandler+0x63a>
      return;
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	e006      	b.n	8002a6e <HAL_UART_IRQHandler+0x63a>
    return;
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	e004      	b.n	8002a6e <HAL_UART_IRQHandler+0x63a>
      return;
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	e002      	b.n	8002a6e <HAL_UART_IRQHandler+0x63a>
      return;
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	e000      	b.n	8002a6e <HAL_UART_IRQHandler+0x63a>
    return;
 8002a6c:	46c0      	nop			; (mov r8, r8)
  }
}
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b02a      	add	sp, #168	; 0xa8
 8002a72:	bdb0      	pop	{r4, r5, r7, pc}
 8002a74:	fffffeff 	.word	0xfffffeff
 8002a78:	fffffedf 	.word	0xfffffedf
 8002a7c:	effffffe 	.word	0xeffffffe

08002a80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	000a      	movs	r2, r1
 8002aaa:	1cbb      	adds	r3, r7, #2
 8002aac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aae:	46c0      	nop			; (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	b5b0      	push	{r4, r5, r7, lr}
 8002aba:	b090      	sub	sp, #64	; 0x40
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ac0:	231a      	movs	r3, #26
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	189b      	adds	r3, r3, r2
 8002ac6:	19db      	adds	r3, r3, r7
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4ac4      	ldr	r2, [pc, #784]	; (8002dfc <UART_SetConfig+0x344>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002af6:	430b      	orrs	r3, r1
 8002af8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4abf      	ldr	r2, [pc, #764]	; (8002e00 <UART_SetConfig+0x348>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	0018      	movs	r0, r3
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	0003      	movs	r3, r0
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4ab9      	ldr	r2, [pc, #740]	; (8002e04 <UART_SetConfig+0x34c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4ab4      	ldr	r2, [pc, #720]	; (8002e08 <UART_SetConfig+0x350>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	0018      	movs	r0, r3
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	0003      	movs	r3, r0
 8002b5a:	430b      	orrs	r3, r1
 8002b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4aaa      	ldr	r2, [pc, #680]	; (8002e0c <UART_SetConfig+0x354>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d131      	bne.n	8002bcc <UART_SetConfig+0x114>
 8002b68:	4ba9      	ldr	r3, [pc, #676]	; (8002e10 <UART_SetConfig+0x358>)
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d01d      	beq.n	8002bb0 <UART_SetConfig+0xf8>
 8002b74:	d823      	bhi.n	8002bbe <UART_SetConfig+0x106>
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d00c      	beq.n	8002b94 <UART_SetConfig+0xdc>
 8002b7a:	d820      	bhi.n	8002bbe <UART_SetConfig+0x106>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <UART_SetConfig+0xce>
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d00e      	beq.n	8002ba2 <UART_SetConfig+0xea>
 8002b84:	e01b      	b.n	8002bbe <UART_SetConfig+0x106>
 8002b86:	231b      	movs	r3, #27
 8002b88:	2220      	movs	r2, #32
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e071      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002b94:	231b      	movs	r3, #27
 8002b96:	2220      	movs	r2, #32
 8002b98:	189b      	adds	r3, r3, r2
 8002b9a:	19db      	adds	r3, r3, r7
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	e06a      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002ba2:	231b      	movs	r3, #27
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	19db      	adds	r3, r3, r7
 8002baa:	2204      	movs	r2, #4
 8002bac:	701a      	strb	r2, [r3, #0]
 8002bae:	e063      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002bb0:	231b      	movs	r3, #27
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	189b      	adds	r3, r3, r2
 8002bb6:	19db      	adds	r3, r3, r7
 8002bb8:	2208      	movs	r2, #8
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e05c      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002bbe:	231b      	movs	r3, #27
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	189b      	adds	r3, r3, r2
 8002bc4:	19db      	adds	r3, r3, r7
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e055      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a90      	ldr	r2, [pc, #576]	; (8002e14 <UART_SetConfig+0x35c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d106      	bne.n	8002be4 <UART_SetConfig+0x12c>
 8002bd6:	231b      	movs	r3, #27
 8002bd8:	2220      	movs	r2, #32
 8002bda:	189b      	adds	r3, r3, r2
 8002bdc:	19db      	adds	r3, r3, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e049      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a86      	ldr	r2, [pc, #536]	; (8002e04 <UART_SetConfig+0x34c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d13e      	bne.n	8002c6c <UART_SetConfig+0x1b4>
 8002bee:	4b88      	ldr	r3, [pc, #544]	; (8002e10 <UART_SetConfig+0x358>)
 8002bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bf2:	23c0      	movs	r3, #192	; 0xc0
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	22c0      	movs	r2, #192	; 0xc0
 8002bfa:	0112      	lsls	r2, r2, #4
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d027      	beq.n	8002c50 <UART_SetConfig+0x198>
 8002c00:	22c0      	movs	r2, #192	; 0xc0
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d82a      	bhi.n	8002c5e <UART_SetConfig+0x1a6>
 8002c08:	2280      	movs	r2, #128	; 0x80
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d011      	beq.n	8002c34 <UART_SetConfig+0x17c>
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d822      	bhi.n	8002c5e <UART_SetConfig+0x1a6>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d004      	beq.n	8002c26 <UART_SetConfig+0x16e>
 8002c1c:	2280      	movs	r2, #128	; 0x80
 8002c1e:	00d2      	lsls	r2, r2, #3
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00e      	beq.n	8002c42 <UART_SetConfig+0x18a>
 8002c24:	e01b      	b.n	8002c5e <UART_SetConfig+0x1a6>
 8002c26:	231b      	movs	r3, #27
 8002c28:	2220      	movs	r2, #32
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	19db      	adds	r3, r3, r7
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e021      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002c34:	231b      	movs	r3, #27
 8002c36:	2220      	movs	r2, #32
 8002c38:	189b      	adds	r3, r3, r2
 8002c3a:	19db      	adds	r3, r3, r7
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e01a      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002c42:	231b      	movs	r3, #27
 8002c44:	2220      	movs	r2, #32
 8002c46:	189b      	adds	r3, r3, r2
 8002c48:	19db      	adds	r3, r3, r7
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e013      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002c50:	231b      	movs	r3, #27
 8002c52:	2220      	movs	r2, #32
 8002c54:	189b      	adds	r3, r3, r2
 8002c56:	19db      	adds	r3, r3, r7
 8002c58:	2208      	movs	r2, #8
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e00c      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002c5e:	231b      	movs	r3, #27
 8002c60:	2220      	movs	r2, #32
 8002c62:	189b      	adds	r3, r3, r2
 8002c64:	19db      	adds	r3, r3, r7
 8002c66:	2210      	movs	r2, #16
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e005      	b.n	8002c78 <UART_SetConfig+0x1c0>
 8002c6c:	231b      	movs	r3, #27
 8002c6e:	2220      	movs	r2, #32
 8002c70:	189b      	adds	r3, r3, r2
 8002c72:	19db      	adds	r3, r3, r7
 8002c74:	2210      	movs	r2, #16
 8002c76:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a61      	ldr	r2, [pc, #388]	; (8002e04 <UART_SetConfig+0x34c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d000      	beq.n	8002c84 <UART_SetConfig+0x1cc>
 8002c82:	e092      	b.n	8002daa <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c84:	231b      	movs	r3, #27
 8002c86:	2220      	movs	r2, #32
 8002c88:	189b      	adds	r3, r3, r2
 8002c8a:	19db      	adds	r3, r3, r7
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d015      	beq.n	8002cbe <UART_SetConfig+0x206>
 8002c92:	dc18      	bgt.n	8002cc6 <UART_SetConfig+0x20e>
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d00d      	beq.n	8002cb4 <UART_SetConfig+0x1fc>
 8002c98:	dc15      	bgt.n	8002cc6 <UART_SetConfig+0x20e>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <UART_SetConfig+0x1ec>
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d005      	beq.n	8002cae <UART_SetConfig+0x1f6>
 8002ca2:	e010      	b.n	8002cc6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ca4:	f7ff f944 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cac:	e014      	b.n	8002cd8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cae:	4b5a      	ldr	r3, [pc, #360]	; (8002e18 <UART_SetConfig+0x360>)
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cb2:	e011      	b.n	8002cd8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb4:	f7ff f8b0 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cbc:	e00c      	b.n	8002cd8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cbe:	2380      	movs	r3, #128	; 0x80
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cc4:	e008      	b.n	8002cd8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002cca:	231a      	movs	r3, #26
 8002ccc:	2220      	movs	r2, #32
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	19db      	adds	r3, r3, r7
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
        break;
 8002cd6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d100      	bne.n	8002ce0 <UART_SetConfig+0x228>
 8002cde:	e147      	b.n	8002f70 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce4:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <UART_SetConfig+0x364>)
 8002ce6:	0052      	lsls	r2, r2, #1
 8002ce8:	5ad3      	ldrh	r3, [r2, r3]
 8002cea:	0019      	movs	r1, r3
 8002cec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cee:	f7fd fa13 	bl	8000118 <__udivsi3>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	0013      	movs	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	189b      	adds	r3, r3, r2
 8002d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d305      	bcc.n	8002d12 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d906      	bls.n	8002d20 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8002d12:	231a      	movs	r3, #26
 8002d14:	2220      	movs	r2, #32
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	19db      	adds	r3, r3, r7
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
 8002d1e:	e127      	b.n	8002f70 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d2c:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <UART_SetConfig+0x364>)
 8002d2e:	0052      	lsls	r2, r2, #1
 8002d30:	5ad3      	ldrh	r3, [r2, r3]
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	69b8      	ldr	r0, [r7, #24]
 8002d3e:	69f9      	ldr	r1, [r7, #28]
 8002d40:	f7fd fb60 	bl	8000404 <__aeabi_uldivmod>
 8002d44:	0002      	movs	r2, r0
 8002d46:	000b      	movs	r3, r1
 8002d48:	0e11      	lsrs	r1, r2, #24
 8002d4a:	021d      	lsls	r5, r3, #8
 8002d4c:	430d      	orrs	r5, r1
 8002d4e:	0214      	lsls	r4, r2, #8
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68b8      	ldr	r0, [r7, #8]
 8002d5e:	68f9      	ldr	r1, [r7, #12]
 8002d60:	1900      	adds	r0, r0, r4
 8002d62:	4169      	adcs	r1, r5
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f7fd fb47 	bl	8000404 <__aeabi_uldivmod>
 8002d76:	0002      	movs	r2, r0
 8002d78:	000b      	movs	r3, r1
 8002d7a:	0013      	movs	r3, r2
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d80:	23c0      	movs	r3, #192	; 0xc0
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d309      	bcc.n	8002d9c <UART_SetConfig+0x2e4>
 8002d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	035b      	lsls	r3, r3, #13
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d204      	bcs.n	8002d9c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	e0e9      	b.n	8002f70 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8002d9c:	231a      	movs	r3, #26
 8002d9e:	2220      	movs	r2, #32
 8002da0:	189b      	adds	r3, r3, r2
 8002da2:	19db      	adds	r3, r3, r7
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
 8002da8:	e0e2      	b.n	8002f70 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d000      	beq.n	8002db8 <UART_SetConfig+0x300>
 8002db6:	e083      	b.n	8002ec0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002db8:	231b      	movs	r3, #27
 8002dba:	2220      	movs	r2, #32
 8002dbc:	189b      	adds	r3, r3, r2
 8002dbe:	19db      	adds	r3, r3, r7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d015      	beq.n	8002df2 <UART_SetConfig+0x33a>
 8002dc6:	dc2b      	bgt.n	8002e20 <UART_SetConfig+0x368>
 8002dc8:	2b04      	cmp	r3, #4
 8002dca:	d00d      	beq.n	8002de8 <UART_SetConfig+0x330>
 8002dcc:	dc28      	bgt.n	8002e20 <UART_SetConfig+0x368>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <UART_SetConfig+0x320>
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d005      	beq.n	8002de2 <UART_SetConfig+0x32a>
 8002dd6:	e023      	b.n	8002e20 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f7ff f8aa 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	0003      	movs	r3, r0
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002de0:	e027      	b.n	8002e32 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de2:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <UART_SetConfig+0x360>)
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002de6:	e024      	b.n	8002e32 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002de8:	f7ff f816 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8002dec:	0003      	movs	r3, r0
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002df0:	e01f      	b.n	8002e32 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002df8:	e01b      	b.n	8002e32 <UART_SetConfig+0x37a>
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	cfff69f3 	.word	0xcfff69f3
 8002e00:	ffffcfff 	.word	0xffffcfff
 8002e04:	40008000 	.word	0x40008000
 8002e08:	11fff4ff 	.word	0x11fff4ff
 8002e0c:	40013800 	.word	0x40013800
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40004400 	.word	0x40004400
 8002e18:	00f42400 	.word	0x00f42400
 8002e1c:	08004954 	.word	0x08004954
      default:
        pclk = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002e24:	231a      	movs	r3, #26
 8002e26:	2220      	movs	r2, #32
 8002e28:	189b      	adds	r3, r3, r2
 8002e2a:	19db      	adds	r3, r3, r7
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
        break;
 8002e30:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <UART_SetConfig+0x382>
 8002e38:	e09a      	b.n	8002f70 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3e:	4b58      	ldr	r3, [pc, #352]	; (8002fa0 <UART_SetConfig+0x4e8>)
 8002e40:	0052      	lsls	r2, r2, #1
 8002e42:	5ad3      	ldrh	r3, [r2, r3]
 8002e44:	0019      	movs	r1, r3
 8002e46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e48:	f7fd f966 	bl	8000118 <__udivsi3>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	005a      	lsls	r2, r3, #1
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	18d2      	adds	r2, r2, r3
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	0010      	movs	r0, r2
 8002e60:	f7fd f95a 	bl	8000118 <__udivsi3>
 8002e64:	0003      	movs	r3, r0
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d921      	bls.n	8002eb2 <UART_SetConfig+0x3fa>
 8002e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	025b      	lsls	r3, r3, #9
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d21c      	bcs.n	8002eb2 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	200e      	movs	r0, #14
 8002e7e:	2420      	movs	r4, #32
 8002e80:	1903      	adds	r3, r0, r4
 8002e82:	19db      	adds	r3, r3, r7
 8002e84:	210f      	movs	r1, #15
 8002e86:	438a      	bics	r2, r1
 8002e88:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2207      	movs	r2, #7
 8002e92:	4013      	ands	r3, r2
 8002e94:	b299      	uxth	r1, r3
 8002e96:	1903      	adds	r3, r0, r4
 8002e98:	19db      	adds	r3, r3, r7
 8002e9a:	1902      	adds	r2, r0, r4
 8002e9c:	19d2      	adds	r2, r2, r7
 8002e9e:	8812      	ldrh	r2, [r2, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1902      	adds	r2, r0, r4
 8002eaa:	19d2      	adds	r2, r2, r7
 8002eac:	8812      	ldrh	r2, [r2, #0]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	e05e      	b.n	8002f70 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002eb2:	231a      	movs	r3, #26
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	189b      	adds	r3, r3, r2
 8002eb8:	19db      	adds	r3, r3, r7
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e057      	b.n	8002f70 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ec0:	231b      	movs	r3, #27
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	189b      	adds	r3, r3, r2
 8002ec6:	19db      	adds	r3, r3, r7
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d015      	beq.n	8002efa <UART_SetConfig+0x442>
 8002ece:	dc18      	bgt.n	8002f02 <UART_SetConfig+0x44a>
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d00d      	beq.n	8002ef0 <UART_SetConfig+0x438>
 8002ed4:	dc15      	bgt.n	8002f02 <UART_SetConfig+0x44a>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <UART_SetConfig+0x428>
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d005      	beq.n	8002eea <UART_SetConfig+0x432>
 8002ede:	e010      	b.n	8002f02 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f7ff f826 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ee8:	e014      	b.n	8002f14 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eea:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <UART_SetConfig+0x4ec>)
 8002eec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002eee:	e011      	b.n	8002f14 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef0:	f7fe ff92 	bl	8001e18 <HAL_RCC_GetSysClockFreq>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ef8:	e00c      	b.n	8002f14 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f00:	e008      	b.n	8002f14 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f06:	231a      	movs	r3, #26
 8002f08:	2220      	movs	r2, #32
 8002f0a:	189b      	adds	r3, r3, r2
 8002f0c:	19db      	adds	r3, r3, r7
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
        break;
 8002f12:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d02a      	beq.n	8002f70 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <UART_SetConfig+0x4e8>)
 8002f20:	0052      	lsls	r2, r2, #1
 8002f22:	5ad3      	ldrh	r3, [r2, r3]
 8002f24:	0019      	movs	r1, r3
 8002f26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f28:	f7fd f8f6 	bl	8000118 <__udivsi3>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	001a      	movs	r2, r3
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	18d2      	adds	r2, r2, r3
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	0010      	movs	r0, r2
 8002f40:	f7fd f8ea 	bl	8000118 <__udivsi3>
 8002f44:	0003      	movs	r3, r0
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	2b0f      	cmp	r3, #15
 8002f4c:	d90a      	bls.n	8002f64 <UART_SetConfig+0x4ac>
 8002f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	025b      	lsls	r3, r3, #9
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d205      	bcs.n	8002f64 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	e005      	b.n	8002f70 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002f64:	231a      	movs	r3, #26
 8002f66:	2220      	movs	r2, #32
 8002f68:	189b      	adds	r3, r3, r2
 8002f6a:	19db      	adds	r3, r3, r7
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	226a      	movs	r2, #106	; 0x6a
 8002f74:	2101      	movs	r1, #1
 8002f76:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	2268      	movs	r2, #104	; 0x68
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	2200      	movs	r2, #0
 8002f84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	2200      	movs	r2, #0
 8002f8a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002f8c:	231a      	movs	r3, #26
 8002f8e:	2220      	movs	r2, #32
 8002f90:	189b      	adds	r3, r3, r2
 8002f92:	19db      	adds	r3, r3, r7
 8002f94:	781b      	ldrb	r3, [r3, #0]
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b010      	add	sp, #64	; 0x40
 8002f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	08004954 	.word	0x08004954
 8002fa4:	00f42400 	.word	0x00f42400

08002fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a4a      	ldr	r2, [pc, #296]	; (80030ec <UART_AdvFeatureConfig+0x144>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4a43      	ldr	r2, [pc, #268]	; (80030f0 <UART_AdvFeatureConfig+0x148>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d00b      	beq.n	8003016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a3b      	ldr	r2, [pc, #236]	; (80030f4 <UART_AdvFeatureConfig+0x14c>)
 8003006:	4013      	ands	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	2208      	movs	r2, #8
 800301c:	4013      	ands	r3, r2
 800301e:	d00b      	beq.n	8003038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4a34      	ldr	r2, [pc, #208]	; (80030f8 <UART_AdvFeatureConfig+0x150>)
 8003028:	4013      	ands	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	2210      	movs	r2, #16
 800303e:	4013      	ands	r3, r2
 8003040:	d00b      	beq.n	800305a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a2c      	ldr	r2, [pc, #176]	; (80030fc <UART_AdvFeatureConfig+0x154>)
 800304a:	4013      	ands	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	2220      	movs	r2, #32
 8003060:	4013      	ands	r3, r2
 8003062:	d00b      	beq.n	800307c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4a25      	ldr	r2, [pc, #148]	; (8003100 <UART_AdvFeatureConfig+0x158>)
 800306c:	4013      	ands	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	2240      	movs	r2, #64	; 0x40
 8003082:	4013      	ands	r3, r2
 8003084:	d01d      	beq.n	80030c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a1d      	ldr	r2, [pc, #116]	; (8003104 <UART_AdvFeatureConfig+0x15c>)
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	035b      	lsls	r3, r3, #13
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d10b      	bne.n	80030c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a15      	ldr	r2, [pc, #84]	; (8003108 <UART_AdvFeatureConfig+0x160>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	4013      	ands	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <UART_AdvFeatureConfig+0x164>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]
  }
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b002      	add	sp, #8
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	fffdffff 	.word	0xfffdffff
 80030f0:	fffeffff 	.word	0xfffeffff
 80030f4:	fffbffff 	.word	0xfffbffff
 80030f8:	ffff7fff 	.word	0xffff7fff
 80030fc:	ffffefff 	.word	0xffffefff
 8003100:	ffffdfff 	.word	0xffffdfff
 8003104:	ffefffff 	.word	0xffefffff
 8003108:	ff9fffff 	.word	0xff9fffff
 800310c:	fff7ffff 	.word	0xfff7ffff

08003110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af02      	add	r7, sp, #8
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2290      	movs	r2, #144	; 0x90
 800311c:	2100      	movs	r1, #0
 800311e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003120:	f7fd feb2 	bl	8000e88 <HAL_GetTick>
 8003124:	0003      	movs	r3, r0
 8003126:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2208      	movs	r2, #8
 8003130:	4013      	ands	r3, r2
 8003132:	2b08      	cmp	r3, #8
 8003134:	d10c      	bne.n	8003150 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	0391      	lsls	r1, r2, #14
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	4a1a      	ldr	r2, [pc, #104]	; (80031a8 <UART_CheckIdleState+0x98>)
 8003140:	9200      	str	r2, [sp, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	f000 f832 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d001      	beq.n	8003150 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e026      	b.n	800319e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2204      	movs	r2, #4
 8003158:	4013      	ands	r3, r2
 800315a:	2b04      	cmp	r3, #4
 800315c:	d10c      	bne.n	8003178 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2280      	movs	r2, #128	; 0x80
 8003162:	03d1      	lsls	r1, r2, #15
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <UART_CheckIdleState+0x98>)
 8003168:	9200      	str	r2, [sp, #0]
 800316a:	2200      	movs	r2, #0
 800316c:	f000 f81e 	bl	80031ac <UART_WaitOnFlagUntilTimeout>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d001      	beq.n	8003178 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e012      	b.n	800319e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2288      	movs	r2, #136	; 0x88
 800317c:	2120      	movs	r1, #32
 800317e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	228c      	movs	r2, #140	; 0x8c
 8003184:	2120      	movs	r1, #32
 8003186:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2284      	movs	r2, #132	; 0x84
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	0018      	movs	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	b004      	add	sp, #16
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	46c0      	nop			; (mov r8, r8)
 80031a8:	01ffffff 	.word	0x01ffffff

080031ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b094      	sub	sp, #80	; 0x50
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	603b      	str	r3, [r7, #0]
 80031b8:	1dfb      	adds	r3, r7, #7
 80031ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031bc:	e0a7      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c0:	3301      	adds	r3, #1
 80031c2:	d100      	bne.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80031c4:	e0a3      	b.n	800330e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c6:	f7fd fe5f 	bl	8000e88 <HAL_GetTick>
 80031ca:	0002      	movs	r2, r0
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d302      	bcc.n	80031dc <UART_WaitOnFlagUntilTimeout+0x30>
 80031d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d13f      	bne.n	800325c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031dc:	f3ef 8310 	mrs	r3, PRIMASK
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80031e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
 80031e6:	2301      	movs	r3, #1
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	f383 8810 	msr	PRIMASK, r3
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	494e      	ldr	r1, [pc, #312]	; (8003338 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80031fe:	400a      	ands	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003204:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	f383 8810 	msr	PRIMASK, r3
}
 800320c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320e:	f3ef 8310 	mrs	r3, PRIMASK
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003216:	643b      	str	r3, [r7, #64]	; 0x40
 8003218:	2301      	movs	r3, #1
 800321a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321e:	f383 8810 	msr	PRIMASK, r3
}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2101      	movs	r1, #1
 8003230:	438a      	bics	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003236:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323a:	f383 8810 	msr	PRIMASK, r3
}
 800323e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2288      	movs	r2, #136	; 0x88
 8003244:	2120      	movs	r1, #32
 8003246:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	228c      	movs	r2, #140	; 0x8c
 800324c:	2120      	movs	r1, #32
 800324e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2284      	movs	r2, #132	; 0x84
 8003254:	2100      	movs	r1, #0
 8003256:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e069      	b.n	8003330 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2204      	movs	r2, #4
 8003264:	4013      	ands	r3, r2
 8003266:	d052      	beq.n	800330e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	401a      	ands	r2, r3
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	429a      	cmp	r2, r3
 800327a:	d148      	bne.n	800330e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2280      	movs	r2, #128	; 0x80
 8003282:	0112      	lsls	r2, r2, #4
 8003284:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003286:	f3ef 8310 	mrs	r3, PRIMASK
 800328a:	613b      	str	r3, [r7, #16]
  return(result);
 800328c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003290:	2301      	movs	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f383 8810 	msr	PRIMASK, r3
}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4924      	ldr	r1, [pc, #144]	; (8003338 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b8:	f3ef 8310 	mrs	r3, PRIMASK
 80032bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80032be:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c2:	2301      	movs	r3, #1
 80032c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			; (mov r8, r8)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2101      	movs	r1, #1
 80032da:	438a      	bics	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	f383 8810 	msr	PRIMASK, r3
}
 80032e8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2288      	movs	r2, #136	; 0x88
 80032ee:	2120      	movs	r1, #32
 80032f0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	228c      	movs	r2, #140	; 0x8c
 80032f6:	2120      	movs	r1, #32
 80032f8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2290      	movs	r2, #144	; 0x90
 80032fe:	2120      	movs	r1, #32
 8003300:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2284      	movs	r2, #132	; 0x84
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e010      	b.n	8003330 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	4013      	ands	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	425a      	negs	r2, r3
 800331e:	4153      	adcs	r3, r2
 8003320:	b2db      	uxtb	r3, r3
 8003322:	001a      	movs	r2, r3
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d100      	bne.n	800332e <UART_WaitOnFlagUntilTimeout+0x182>
 800332c:	e747      	b.n	80031be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	b014      	add	sp, #80	; 0x50
 8003336:	bd80      	pop	{r7, pc}
 8003338:	fffffe5f 	.word	0xfffffe5f

0800333c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08e      	sub	sp, #56	; 0x38
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003344:	f3ef 8310 	mrs	r3, PRIMASK
 8003348:	617b      	str	r3, [r7, #20]
  return(result);
 800334a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
 800334e:	2301      	movs	r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f383 8810 	msr	PRIMASK, r3
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4926      	ldr	r1, [pc, #152]	; (8003400 <UART_EndRxTransfer+0xc4>)
 8003366:	400a      	ands	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	f383 8810 	msr	PRIMASK, r3
}
 8003374:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003376:	f3ef 8310 	mrs	r3, PRIMASK
 800337a:	623b      	str	r3, [r7, #32]
  return(result);
 800337c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
 8003380:	2301      	movs	r3, #1
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	f383 8810 	msr	PRIMASK, r3
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	491b      	ldr	r1, [pc, #108]	; (8003404 <UART_EndRxTransfer+0xc8>)
 8003398:	400a      	ands	r2, r1
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	f383 8810 	msr	PRIMASK, r3
}
 80033a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d118      	bne.n	80033e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b0:	f3ef 8310 	mrs	r3, PRIMASK
 80033b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80033b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ba:	2301      	movs	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f383 8810 	msr	PRIMASK, r3
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2110      	movs	r1, #16
 80033d2:	438a      	bics	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	228c      	movs	r2, #140	; 0x8c
 80033e6:	2120      	movs	r1, #32
 80033e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b00e      	add	sp, #56	; 0x38
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	fffffedf 	.word	0xfffffedf
 8003404:	effffffe 	.word	0xeffffffe

08003408 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	225e      	movs	r2, #94	; 0x5e
 800341a:	2100      	movs	r1, #0
 800341c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2256      	movs	r2, #86	; 0x56
 8003422:	2100      	movs	r1, #0
 8003424:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	0018      	movs	r0, r3
 800342a:	f7ff fb31 	bl	8002a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	b004      	add	sp, #16
 8003434:	bd80      	pop	{r7, pc}

08003436 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800343e:	f3ef 8310 	mrs	r3, PRIMASK
 8003442:	60bb      	str	r3, [r7, #8]
  return(result);
 8003444:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	2301      	movs	r3, #1
 800344a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2140      	movs	r1, #64	; 0x40
 8003460:	438a      	bics	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f383 8810 	msr	PRIMASK, r3
}
 800346e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2288      	movs	r2, #136	; 0x88
 8003474:	2120      	movs	r1, #32
 8003476:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	0018      	movs	r0, r3
 8003482:	f7ff fafd 	bl	8002a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	46bd      	mov	sp, r7
 800348a:	b006      	add	sp, #24
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	46bd      	mov	sp, r7
 800349a:	b002      	add	sp, #8
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b002      	add	sp, #8
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2284      	movs	r2, #132	; 0x84
 80034cc:	5c9b      	ldrb	r3, [r3, r2]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e027      	b.n	8003526 <HAL_UARTEx_DisableFifoMode+0x66>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2284      	movs	r2, #132	; 0x84
 80034da:	2101      	movs	r1, #1
 80034dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2288      	movs	r2, #136	; 0x88
 80034e2:	2124      	movs	r1, #36	; 0x24
 80034e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2101      	movs	r1, #1
 80034fa:	438a      	bics	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a0b      	ldr	r2, [pc, #44]	; (8003530 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003502:	4013      	ands	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2288      	movs	r2, #136	; 0x88
 8003518:	2120      	movs	r1, #32
 800351a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2284      	movs	r2, #132	; 0x84
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b004      	add	sp, #16
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	dfffffff 	.word	0xdfffffff

08003534 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2284      	movs	r2, #132	; 0x84
 8003542:	5c9b      	ldrb	r3, [r3, r2]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d101      	bne.n	800354c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003548:	2302      	movs	r3, #2
 800354a:	e02e      	b.n	80035aa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2284      	movs	r2, #132	; 0x84
 8003550:	2101      	movs	r1, #1
 8003552:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2288      	movs	r2, #136	; 0x88
 8003558:	2124      	movs	r1, #36	; 0x24
 800355a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2101      	movs	r1, #1
 8003570:	438a      	bics	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	08d9      	lsrs	r1, r3, #3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f000 f854 	bl	8003638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2288      	movs	r2, #136	; 0x88
 800359c:	2120      	movs	r1, #32
 800359e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2284      	movs	r2, #132	; 0x84
 80035a4:	2100      	movs	r1, #0
 80035a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b004      	add	sp, #16
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2284      	movs	r2, #132	; 0x84
 80035c2:	5c9b      	ldrb	r3, [r3, r2]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e02f      	b.n	800362c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2284      	movs	r2, #132	; 0x84
 80035d0:	2101      	movs	r1, #1
 80035d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2288      	movs	r2, #136	; 0x88
 80035d8:	2124      	movs	r1, #36	; 0x24
 80035da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2101      	movs	r1, #1
 80035f0:	438a      	bics	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	0018      	movs	r0, r3
 800360e:	f000 f813 	bl	8003638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2288      	movs	r2, #136	; 0x88
 800361e:	2120      	movs	r1, #32
 8003620:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2284      	movs	r2, #132	; 0x84
 8003626:	2100      	movs	r1, #0
 8003628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b004      	add	sp, #16
 8003632:	bd80      	pop	{r7, pc}
 8003634:	f1ffffff 	.word	0xf1ffffff

08003638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003644:	2b00      	cmp	r3, #0
 8003646:	d108      	bne.n	800365a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	226a      	movs	r2, #106	; 0x6a
 800364c:	2101      	movs	r1, #1
 800364e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2268      	movs	r2, #104	; 0x68
 8003654:	2101      	movs	r1, #1
 8003656:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003658:	e043      	b.n	80036e2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800365a:	260f      	movs	r6, #15
 800365c:	19bb      	adds	r3, r7, r6
 800365e:	2208      	movs	r2, #8
 8003660:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003662:	200e      	movs	r0, #14
 8003664:	183b      	adds	r3, r7, r0
 8003666:	2208      	movs	r2, #8
 8003668:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	0e5b      	lsrs	r3, r3, #25
 8003672:	b2da      	uxtb	r2, r3
 8003674:	240d      	movs	r4, #13
 8003676:	193b      	adds	r3, r7, r4
 8003678:	2107      	movs	r1, #7
 800367a:	400a      	ands	r2, r1
 800367c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	0f5b      	lsrs	r3, r3, #29
 8003686:	b2da      	uxtb	r2, r3
 8003688:	250c      	movs	r5, #12
 800368a:	197b      	adds	r3, r7, r5
 800368c:	2107      	movs	r1, #7
 800368e:	400a      	ands	r2, r1
 8003690:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003692:	183b      	adds	r3, r7, r0
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	197a      	adds	r2, r7, r5
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	4914      	ldr	r1, [pc, #80]	; (80036ec <UARTEx_SetNbDataToProcess+0xb4>)
 800369c:	5c8a      	ldrb	r2, [r1, r2]
 800369e:	435a      	muls	r2, r3
 80036a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80036a2:	197b      	adds	r3, r7, r5
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	4a12      	ldr	r2, [pc, #72]	; (80036f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80036a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036aa:	0019      	movs	r1, r3
 80036ac:	f7fc fdbe 	bl	800022c <__divsi3>
 80036b0:	0003      	movs	r3, r0
 80036b2:	b299      	uxth	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	226a      	movs	r2, #106	; 0x6a
 80036b8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036ba:	19bb      	adds	r3, r7, r6
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	193a      	adds	r2, r7, r4
 80036c0:	7812      	ldrb	r2, [r2, #0]
 80036c2:	490a      	ldr	r1, [pc, #40]	; (80036ec <UARTEx_SetNbDataToProcess+0xb4>)
 80036c4:	5c8a      	ldrb	r2, [r1, r2]
 80036c6:	435a      	muls	r2, r3
 80036c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80036ca:	193b      	adds	r3, r7, r4
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036d2:	0019      	movs	r1, r3
 80036d4:	f7fc fdaa 	bl	800022c <__divsi3>
 80036d8:	0003      	movs	r3, r0
 80036da:	b299      	uxth	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2268      	movs	r2, #104	; 0x68
 80036e0:	5299      	strh	r1, [r3, r2]
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b005      	add	sp, #20
 80036e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	0800496c 	.word	0x0800496c
 80036f0:	08004974 	.word	0x08004974

080036f4 <__errno>:
 80036f4:	4b01      	ldr	r3, [pc, #4]	; (80036fc <__errno+0x8>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	4770      	bx	lr
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	2000000c 	.word	0x2000000c

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	2600      	movs	r6, #0
 8003704:	4d0c      	ldr	r5, [pc, #48]	; (8003738 <__libc_init_array+0x38>)
 8003706:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003708:	1b64      	subs	r4, r4, r5
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	2600      	movs	r6, #0
 8003712:	f001 f8d3 	bl	80048bc <_init>
 8003716:	4d0a      	ldr	r5, [pc, #40]	; (8003740 <__libc_init_array+0x40>)
 8003718:	4c0a      	ldr	r4, [pc, #40]	; (8003744 <__libc_init_array+0x44>)
 800371a:	1b64      	subs	r4, r4, r5
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	00b3      	lsls	r3, r6, #2
 8003726:	58eb      	ldr	r3, [r5, r3]
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	00b3      	lsls	r3, r6, #2
 8003730:	58eb      	ldr	r3, [r5, r3]
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	08004a1c 	.word	0x08004a1c
 800373c:	08004a1c 	.word	0x08004a1c
 8003740:	08004a1c 	.word	0x08004a1c
 8003744:	08004a20 	.word	0x08004a20

08003748 <memset>:
 8003748:	0003      	movs	r3, r0
 800374a:	1882      	adds	r2, r0, r2
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	7019      	strb	r1, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <iprintf>:
 8003758:	b40f      	push	{r0, r1, r2, r3}
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <iprintf+0x30>)
 800375c:	b513      	push	{r0, r1, r4, lr}
 800375e:	681c      	ldr	r4, [r3, #0]
 8003760:	2c00      	cmp	r4, #0
 8003762:	d005      	beq.n	8003770 <iprintf+0x18>
 8003764:	69a3      	ldr	r3, [r4, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <iprintf+0x18>
 800376a:	0020      	movs	r0, r4
 800376c:	f000 fa9a 	bl	8003ca4 <__sinit>
 8003770:	ab05      	add	r3, sp, #20
 8003772:	0020      	movs	r0, r4
 8003774:	9a04      	ldr	r2, [sp, #16]
 8003776:	68a1      	ldr	r1, [r4, #8]
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	f000 fcad 	bl	80040d8 <_vfiprintf_r>
 800377e:	bc16      	pop	{r1, r2, r4}
 8003780:	bc08      	pop	{r3}
 8003782:	b004      	add	sp, #16
 8003784:	4718      	bx	r3
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	2000000c 	.word	0x2000000c

0800378c <putchar>:
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <putchar+0x24>)
 800378e:	b570      	push	{r4, r5, r6, lr}
 8003790:	681c      	ldr	r4, [r3, #0]
 8003792:	0005      	movs	r5, r0
 8003794:	2c00      	cmp	r4, #0
 8003796:	d005      	beq.n	80037a4 <putchar+0x18>
 8003798:	69a3      	ldr	r3, [r4, #24]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d102      	bne.n	80037a4 <putchar+0x18>
 800379e:	0020      	movs	r0, r4
 80037a0:	f000 fa80 	bl	8003ca4 <__sinit>
 80037a4:	0029      	movs	r1, r5
 80037a6:	0020      	movs	r0, r4
 80037a8:	68a2      	ldr	r2, [r4, #8]
 80037aa:	f000 ff51 	bl	8004650 <_putc_r>
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	2000000c 	.word	0x2000000c

080037b4 <_puts_r>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	0005      	movs	r5, r0
 80037b8:	000e      	movs	r6, r1
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d004      	beq.n	80037c8 <_puts_r+0x14>
 80037be:	6983      	ldr	r3, [r0, #24]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <_puts_r+0x14>
 80037c4:	f000 fa6e 	bl	8003ca4 <__sinit>
 80037c8:	69ab      	ldr	r3, [r5, #24]
 80037ca:	68ac      	ldr	r4, [r5, #8]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_puts_r+0x22>
 80037d0:	0028      	movs	r0, r5
 80037d2:	f000 fa67 	bl	8003ca4 <__sinit>
 80037d6:	4b2d      	ldr	r3, [pc, #180]	; (800388c <_puts_r+0xd8>)
 80037d8:	429c      	cmp	r4, r3
 80037da:	d122      	bne.n	8003822 <_puts_r+0x6e>
 80037dc:	686c      	ldr	r4, [r5, #4]
 80037de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037e0:	07db      	lsls	r3, r3, #31
 80037e2:	d405      	bmi.n	80037f0 <_puts_r+0x3c>
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	059b      	lsls	r3, r3, #22
 80037e8:	d402      	bmi.n	80037f0 <_puts_r+0x3c>
 80037ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ec:	f000 fafb 	bl	8003de6 <__retarget_lock_acquire_recursive>
 80037f0:	89a3      	ldrh	r3, [r4, #12]
 80037f2:	071b      	lsls	r3, r3, #28
 80037f4:	d502      	bpl.n	80037fc <_puts_r+0x48>
 80037f6:	6923      	ldr	r3, [r4, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d129      	bne.n	8003850 <_puts_r+0x9c>
 80037fc:	0021      	movs	r1, r4
 80037fe:	0028      	movs	r0, r5
 8003800:	f000 f8aa 	bl	8003958 <__swsetup_r>
 8003804:	2800      	cmp	r0, #0
 8003806:	d023      	beq.n	8003850 <_puts_r+0x9c>
 8003808:	2501      	movs	r5, #1
 800380a:	426d      	negs	r5, r5
 800380c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800380e:	07db      	lsls	r3, r3, #31
 8003810:	d405      	bmi.n	800381e <_puts_r+0x6a>
 8003812:	89a3      	ldrh	r3, [r4, #12]
 8003814:	059b      	lsls	r3, r3, #22
 8003816:	d402      	bmi.n	800381e <_puts_r+0x6a>
 8003818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800381a:	f000 fae5 	bl	8003de8 <__retarget_lock_release_recursive>
 800381e:	0028      	movs	r0, r5
 8003820:	bd70      	pop	{r4, r5, r6, pc}
 8003822:	4b1b      	ldr	r3, [pc, #108]	; (8003890 <_puts_r+0xdc>)
 8003824:	429c      	cmp	r4, r3
 8003826:	d101      	bne.n	800382c <_puts_r+0x78>
 8003828:	68ac      	ldr	r4, [r5, #8]
 800382a:	e7d8      	b.n	80037de <_puts_r+0x2a>
 800382c:	4b19      	ldr	r3, [pc, #100]	; (8003894 <_puts_r+0xe0>)
 800382e:	429c      	cmp	r4, r3
 8003830:	d1d5      	bne.n	80037de <_puts_r+0x2a>
 8003832:	68ec      	ldr	r4, [r5, #12]
 8003834:	e7d3      	b.n	80037de <_puts_r+0x2a>
 8003836:	3601      	adds	r6, #1
 8003838:	60a3      	str	r3, [r4, #8]
 800383a:	2b00      	cmp	r3, #0
 800383c:	da04      	bge.n	8003848 <_puts_r+0x94>
 800383e:	69a2      	ldr	r2, [r4, #24]
 8003840:	429a      	cmp	r2, r3
 8003842:	dc16      	bgt.n	8003872 <_puts_r+0xbe>
 8003844:	290a      	cmp	r1, #10
 8003846:	d014      	beq.n	8003872 <_puts_r+0xbe>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	6022      	str	r2, [r4, #0]
 800384e:	7019      	strb	r1, [r3, #0]
 8003850:	68a3      	ldr	r3, [r4, #8]
 8003852:	7831      	ldrb	r1, [r6, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	2900      	cmp	r1, #0
 8003858:	d1ed      	bne.n	8003836 <_puts_r+0x82>
 800385a:	60a3      	str	r3, [r4, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	da0f      	bge.n	8003880 <_puts_r+0xcc>
 8003860:	0028      	movs	r0, r5
 8003862:	0022      	movs	r2, r4
 8003864:	310a      	adds	r1, #10
 8003866:	f000 f821 	bl	80038ac <__swbuf_r>
 800386a:	250a      	movs	r5, #10
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	d1cd      	bne.n	800380c <_puts_r+0x58>
 8003870:	e7ca      	b.n	8003808 <_puts_r+0x54>
 8003872:	0022      	movs	r2, r4
 8003874:	0028      	movs	r0, r5
 8003876:	f000 f819 	bl	80038ac <__swbuf_r>
 800387a:	1c43      	adds	r3, r0, #1
 800387c:	d1e8      	bne.n	8003850 <_puts_r+0x9c>
 800387e:	e7c3      	b.n	8003808 <_puts_r+0x54>
 8003880:	250a      	movs	r5, #10
 8003882:	6823      	ldr	r3, [r4, #0]
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	6022      	str	r2, [r4, #0]
 8003888:	701d      	strb	r5, [r3, #0]
 800388a:	e7bf      	b.n	800380c <_puts_r+0x58>
 800388c:	080049a0 	.word	0x080049a0
 8003890:	080049c0 	.word	0x080049c0
 8003894:	08004980 	.word	0x08004980

08003898 <puts>:
 8003898:	b510      	push	{r4, lr}
 800389a:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <puts+0x10>)
 800389c:	0001      	movs	r1, r0
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	f7ff ff88 	bl	80037b4 <_puts_r>
 80038a4:	bd10      	pop	{r4, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	2000000c 	.word	0x2000000c

080038ac <__swbuf_r>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	0005      	movs	r5, r0
 80038b0:	000e      	movs	r6, r1
 80038b2:	0014      	movs	r4, r2
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d004      	beq.n	80038c2 <__swbuf_r+0x16>
 80038b8:	6983      	ldr	r3, [r0, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <__swbuf_r+0x16>
 80038be:	f000 f9f1 	bl	8003ca4 <__sinit>
 80038c2:	4b22      	ldr	r3, [pc, #136]	; (800394c <__swbuf_r+0xa0>)
 80038c4:	429c      	cmp	r4, r3
 80038c6:	d12e      	bne.n	8003926 <__swbuf_r+0x7a>
 80038c8:	686c      	ldr	r4, [r5, #4]
 80038ca:	69a3      	ldr	r3, [r4, #24]
 80038cc:	60a3      	str	r3, [r4, #8]
 80038ce:	89a3      	ldrh	r3, [r4, #12]
 80038d0:	071b      	lsls	r3, r3, #28
 80038d2:	d532      	bpl.n	800393a <__swbuf_r+0x8e>
 80038d4:	6923      	ldr	r3, [r4, #16]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d02f      	beq.n	800393a <__swbuf_r+0x8e>
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	6922      	ldr	r2, [r4, #16]
 80038de:	b2f7      	uxtb	r7, r6
 80038e0:	1a98      	subs	r0, r3, r2
 80038e2:	6963      	ldr	r3, [r4, #20]
 80038e4:	b2f6      	uxtb	r6, r6
 80038e6:	4283      	cmp	r3, r0
 80038e8:	dc05      	bgt.n	80038f6 <__swbuf_r+0x4a>
 80038ea:	0021      	movs	r1, r4
 80038ec:	0028      	movs	r0, r5
 80038ee:	f000 f937 	bl	8003b60 <_fflush_r>
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d127      	bne.n	8003946 <__swbuf_r+0x9a>
 80038f6:	68a3      	ldr	r3, [r4, #8]
 80038f8:	3001      	adds	r0, #1
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60a3      	str	r3, [r4, #8]
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	1c5a      	adds	r2, r3, #1
 8003902:	6022      	str	r2, [r4, #0]
 8003904:	701f      	strb	r7, [r3, #0]
 8003906:	6963      	ldr	r3, [r4, #20]
 8003908:	4283      	cmp	r3, r0
 800390a:	d004      	beq.n	8003916 <__swbuf_r+0x6a>
 800390c:	89a3      	ldrh	r3, [r4, #12]
 800390e:	07db      	lsls	r3, r3, #31
 8003910:	d507      	bpl.n	8003922 <__swbuf_r+0x76>
 8003912:	2e0a      	cmp	r6, #10
 8003914:	d105      	bne.n	8003922 <__swbuf_r+0x76>
 8003916:	0021      	movs	r1, r4
 8003918:	0028      	movs	r0, r5
 800391a:	f000 f921 	bl	8003b60 <_fflush_r>
 800391e:	2800      	cmp	r0, #0
 8003920:	d111      	bne.n	8003946 <__swbuf_r+0x9a>
 8003922:	0030      	movs	r0, r6
 8003924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <__swbuf_r+0xa4>)
 8003928:	429c      	cmp	r4, r3
 800392a:	d101      	bne.n	8003930 <__swbuf_r+0x84>
 800392c:	68ac      	ldr	r4, [r5, #8]
 800392e:	e7cc      	b.n	80038ca <__swbuf_r+0x1e>
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <__swbuf_r+0xa8>)
 8003932:	429c      	cmp	r4, r3
 8003934:	d1c9      	bne.n	80038ca <__swbuf_r+0x1e>
 8003936:	68ec      	ldr	r4, [r5, #12]
 8003938:	e7c7      	b.n	80038ca <__swbuf_r+0x1e>
 800393a:	0021      	movs	r1, r4
 800393c:	0028      	movs	r0, r5
 800393e:	f000 f80b 	bl	8003958 <__swsetup_r>
 8003942:	2800      	cmp	r0, #0
 8003944:	d0c9      	beq.n	80038da <__swbuf_r+0x2e>
 8003946:	2601      	movs	r6, #1
 8003948:	4276      	negs	r6, r6
 800394a:	e7ea      	b.n	8003922 <__swbuf_r+0x76>
 800394c:	080049a0 	.word	0x080049a0
 8003950:	080049c0 	.word	0x080049c0
 8003954:	08004980 	.word	0x08004980

08003958 <__swsetup_r>:
 8003958:	4b37      	ldr	r3, [pc, #220]	; (8003a38 <__swsetup_r+0xe0>)
 800395a:	b570      	push	{r4, r5, r6, lr}
 800395c:	681d      	ldr	r5, [r3, #0]
 800395e:	0006      	movs	r6, r0
 8003960:	000c      	movs	r4, r1
 8003962:	2d00      	cmp	r5, #0
 8003964:	d005      	beq.n	8003972 <__swsetup_r+0x1a>
 8003966:	69ab      	ldr	r3, [r5, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d102      	bne.n	8003972 <__swsetup_r+0x1a>
 800396c:	0028      	movs	r0, r5
 800396e:	f000 f999 	bl	8003ca4 <__sinit>
 8003972:	4b32      	ldr	r3, [pc, #200]	; (8003a3c <__swsetup_r+0xe4>)
 8003974:	429c      	cmp	r4, r3
 8003976:	d10f      	bne.n	8003998 <__swsetup_r+0x40>
 8003978:	686c      	ldr	r4, [r5, #4]
 800397a:	230c      	movs	r3, #12
 800397c:	5ee2      	ldrsh	r2, [r4, r3]
 800397e:	b293      	uxth	r3, r2
 8003980:	0711      	lsls	r1, r2, #28
 8003982:	d42d      	bmi.n	80039e0 <__swsetup_r+0x88>
 8003984:	06d9      	lsls	r1, r3, #27
 8003986:	d411      	bmi.n	80039ac <__swsetup_r+0x54>
 8003988:	2309      	movs	r3, #9
 800398a:	2001      	movs	r0, #1
 800398c:	6033      	str	r3, [r6, #0]
 800398e:	3337      	adds	r3, #55	; 0x37
 8003990:	4313      	orrs	r3, r2
 8003992:	81a3      	strh	r3, [r4, #12]
 8003994:	4240      	negs	r0, r0
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <__swsetup_r+0xe8>)
 800399a:	429c      	cmp	r4, r3
 800399c:	d101      	bne.n	80039a2 <__swsetup_r+0x4a>
 800399e:	68ac      	ldr	r4, [r5, #8]
 80039a0:	e7eb      	b.n	800397a <__swsetup_r+0x22>
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <__swsetup_r+0xec>)
 80039a4:	429c      	cmp	r4, r3
 80039a6:	d1e8      	bne.n	800397a <__swsetup_r+0x22>
 80039a8:	68ec      	ldr	r4, [r5, #12]
 80039aa:	e7e6      	b.n	800397a <__swsetup_r+0x22>
 80039ac:	075b      	lsls	r3, r3, #29
 80039ae:	d513      	bpl.n	80039d8 <__swsetup_r+0x80>
 80039b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039b2:	2900      	cmp	r1, #0
 80039b4:	d008      	beq.n	80039c8 <__swsetup_r+0x70>
 80039b6:	0023      	movs	r3, r4
 80039b8:	3344      	adds	r3, #68	; 0x44
 80039ba:	4299      	cmp	r1, r3
 80039bc:	d002      	beq.n	80039c4 <__swsetup_r+0x6c>
 80039be:	0030      	movs	r0, r6
 80039c0:	f000 fa80 	bl	8003ec4 <_free_r>
 80039c4:	2300      	movs	r3, #0
 80039c6:	6363      	str	r3, [r4, #52]	; 0x34
 80039c8:	2224      	movs	r2, #36	; 0x24
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	4393      	bics	r3, r2
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	2300      	movs	r3, #0
 80039d2:	6063      	str	r3, [r4, #4]
 80039d4:	6923      	ldr	r3, [r4, #16]
 80039d6:	6023      	str	r3, [r4, #0]
 80039d8:	2308      	movs	r3, #8
 80039da:	89a2      	ldrh	r2, [r4, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	81a3      	strh	r3, [r4, #12]
 80039e0:	6923      	ldr	r3, [r4, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10b      	bne.n	80039fe <__swsetup_r+0xa6>
 80039e6:	21a0      	movs	r1, #160	; 0xa0
 80039e8:	2280      	movs	r2, #128	; 0x80
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	0089      	lsls	r1, r1, #2
 80039ee:	0092      	lsls	r2, r2, #2
 80039f0:	400b      	ands	r3, r1
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d003      	beq.n	80039fe <__swsetup_r+0xa6>
 80039f6:	0021      	movs	r1, r4
 80039f8:	0030      	movs	r0, r6
 80039fa:	f000 fa1f 	bl	8003e3c <__smakebuf_r>
 80039fe:	220c      	movs	r2, #12
 8003a00:	5ea3      	ldrsh	r3, [r4, r2]
 8003a02:	2001      	movs	r0, #1
 8003a04:	001a      	movs	r2, r3
 8003a06:	b299      	uxth	r1, r3
 8003a08:	4002      	ands	r2, r0
 8003a0a:	4203      	tst	r3, r0
 8003a0c:	d00f      	beq.n	8003a2e <__swsetup_r+0xd6>
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60a2      	str	r2, [r4, #8]
 8003a12:	6962      	ldr	r2, [r4, #20]
 8003a14:	4252      	negs	r2, r2
 8003a16:	61a2      	str	r2, [r4, #24]
 8003a18:	2000      	movs	r0, #0
 8003a1a:	6922      	ldr	r2, [r4, #16]
 8003a1c:	4282      	cmp	r2, r0
 8003a1e:	d1ba      	bne.n	8003996 <__swsetup_r+0x3e>
 8003a20:	060a      	lsls	r2, r1, #24
 8003a22:	d5b8      	bpl.n	8003996 <__swsetup_r+0x3e>
 8003a24:	2240      	movs	r2, #64	; 0x40
 8003a26:	4313      	orrs	r3, r2
 8003a28:	81a3      	strh	r3, [r4, #12]
 8003a2a:	3801      	subs	r0, #1
 8003a2c:	e7b3      	b.n	8003996 <__swsetup_r+0x3e>
 8003a2e:	0788      	lsls	r0, r1, #30
 8003a30:	d400      	bmi.n	8003a34 <__swsetup_r+0xdc>
 8003a32:	6962      	ldr	r2, [r4, #20]
 8003a34:	60a2      	str	r2, [r4, #8]
 8003a36:	e7ef      	b.n	8003a18 <__swsetup_r+0xc0>
 8003a38:	2000000c 	.word	0x2000000c
 8003a3c:	080049a0 	.word	0x080049a0
 8003a40:	080049c0 	.word	0x080049c0
 8003a44:	08004980 	.word	0x08004980

08003a48 <__sflush_r>:
 8003a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a4a:	898b      	ldrh	r3, [r1, #12]
 8003a4c:	0005      	movs	r5, r0
 8003a4e:	000c      	movs	r4, r1
 8003a50:	071a      	lsls	r2, r3, #28
 8003a52:	d45f      	bmi.n	8003b14 <__sflush_r+0xcc>
 8003a54:	684a      	ldr	r2, [r1, #4]
 8003a56:	2a00      	cmp	r2, #0
 8003a58:	dc04      	bgt.n	8003a64 <__sflush_r+0x1c>
 8003a5a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003a5c:	2a00      	cmp	r2, #0
 8003a5e:	dc01      	bgt.n	8003a64 <__sflush_r+0x1c>
 8003a60:	2000      	movs	r0, #0
 8003a62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a66:	2f00      	cmp	r7, #0
 8003a68:	d0fa      	beq.n	8003a60 <__sflush_r+0x18>
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2180      	movs	r1, #128	; 0x80
 8003a6e:	682e      	ldr	r6, [r5, #0]
 8003a70:	602a      	str	r2, [r5, #0]
 8003a72:	001a      	movs	r2, r3
 8003a74:	0149      	lsls	r1, r1, #5
 8003a76:	400a      	ands	r2, r1
 8003a78:	420b      	tst	r3, r1
 8003a7a:	d034      	beq.n	8003ae6 <__sflush_r+0x9e>
 8003a7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003a7e:	89a3      	ldrh	r3, [r4, #12]
 8003a80:	075b      	lsls	r3, r3, #29
 8003a82:	d506      	bpl.n	8003a92 <__sflush_r+0x4a>
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	1ac0      	subs	r0, r0, r3
 8003a88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <__sflush_r+0x4a>
 8003a8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a90:	1ac0      	subs	r0, r0, r3
 8003a92:	0002      	movs	r2, r0
 8003a94:	6a21      	ldr	r1, [r4, #32]
 8003a96:	2300      	movs	r3, #0
 8003a98:	0028      	movs	r0, r5
 8003a9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003a9c:	47b8      	blx	r7
 8003a9e:	89a1      	ldrh	r1, [r4, #12]
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d106      	bne.n	8003ab2 <__sflush_r+0x6a>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	2b1d      	cmp	r3, #29
 8003aa8:	d831      	bhi.n	8003b0e <__sflush_r+0xc6>
 8003aaa:	4a2c      	ldr	r2, [pc, #176]	; (8003b5c <__sflush_r+0x114>)
 8003aac:	40da      	lsrs	r2, r3
 8003aae:	07d3      	lsls	r3, r2, #31
 8003ab0:	d52d      	bpl.n	8003b0e <__sflush_r+0xc6>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	6063      	str	r3, [r4, #4]
 8003ab6:	6923      	ldr	r3, [r4, #16]
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	04cb      	lsls	r3, r1, #19
 8003abc:	d505      	bpl.n	8003aca <__sflush_r+0x82>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	d102      	bne.n	8003ac8 <__sflush_r+0x80>
 8003ac2:	682b      	ldr	r3, [r5, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d100      	bne.n	8003aca <__sflush_r+0x82>
 8003ac8:	6560      	str	r0, [r4, #84]	; 0x54
 8003aca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003acc:	602e      	str	r6, [r5, #0]
 8003ace:	2900      	cmp	r1, #0
 8003ad0:	d0c6      	beq.n	8003a60 <__sflush_r+0x18>
 8003ad2:	0023      	movs	r3, r4
 8003ad4:	3344      	adds	r3, #68	; 0x44
 8003ad6:	4299      	cmp	r1, r3
 8003ad8:	d002      	beq.n	8003ae0 <__sflush_r+0x98>
 8003ada:	0028      	movs	r0, r5
 8003adc:	f000 f9f2 	bl	8003ec4 <_free_r>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	6360      	str	r0, [r4, #52]	; 0x34
 8003ae4:	e7bd      	b.n	8003a62 <__sflush_r+0x1a>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	0028      	movs	r0, r5
 8003aea:	6a21      	ldr	r1, [r4, #32]
 8003aec:	47b8      	blx	r7
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	d1c5      	bne.n	8003a7e <__sflush_r+0x36>
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0c2      	beq.n	8003a7e <__sflush_r+0x36>
 8003af8:	2b1d      	cmp	r3, #29
 8003afa:	d001      	beq.n	8003b00 <__sflush_r+0xb8>
 8003afc:	2b16      	cmp	r3, #22
 8003afe:	d101      	bne.n	8003b04 <__sflush_r+0xbc>
 8003b00:	602e      	str	r6, [r5, #0]
 8003b02:	e7ad      	b.n	8003a60 <__sflush_r+0x18>
 8003b04:	2340      	movs	r3, #64	; 0x40
 8003b06:	89a2      	ldrh	r2, [r4, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	81a3      	strh	r3, [r4, #12]
 8003b0c:	e7a9      	b.n	8003a62 <__sflush_r+0x1a>
 8003b0e:	2340      	movs	r3, #64	; 0x40
 8003b10:	430b      	orrs	r3, r1
 8003b12:	e7fa      	b.n	8003b0a <__sflush_r+0xc2>
 8003b14:	690f      	ldr	r7, [r1, #16]
 8003b16:	2f00      	cmp	r7, #0
 8003b18:	d0a2      	beq.n	8003a60 <__sflush_r+0x18>
 8003b1a:	680a      	ldr	r2, [r1, #0]
 8003b1c:	600f      	str	r7, [r1, #0]
 8003b1e:	1bd2      	subs	r2, r2, r7
 8003b20:	9201      	str	r2, [sp, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	079b      	lsls	r3, r3, #30
 8003b26:	d100      	bne.n	8003b2a <__sflush_r+0xe2>
 8003b28:	694a      	ldr	r2, [r1, #20]
 8003b2a:	60a2      	str	r2, [r4, #8]
 8003b2c:	9b01      	ldr	r3, [sp, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	dc00      	bgt.n	8003b34 <__sflush_r+0xec>
 8003b32:	e795      	b.n	8003a60 <__sflush_r+0x18>
 8003b34:	003a      	movs	r2, r7
 8003b36:	0028      	movs	r0, r5
 8003b38:	9b01      	ldr	r3, [sp, #4]
 8003b3a:	6a21      	ldr	r1, [r4, #32]
 8003b3c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b3e:	47b0      	blx	r6
 8003b40:	2800      	cmp	r0, #0
 8003b42:	dc06      	bgt.n	8003b52 <__sflush_r+0x10a>
 8003b44:	2340      	movs	r3, #64	; 0x40
 8003b46:	2001      	movs	r0, #1
 8003b48:	89a2      	ldrh	r2, [r4, #12]
 8003b4a:	4240      	negs	r0, r0
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	81a3      	strh	r3, [r4, #12]
 8003b50:	e787      	b.n	8003a62 <__sflush_r+0x1a>
 8003b52:	9b01      	ldr	r3, [sp, #4]
 8003b54:	183f      	adds	r7, r7, r0
 8003b56:	1a1b      	subs	r3, r3, r0
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	e7e7      	b.n	8003b2c <__sflush_r+0xe4>
 8003b5c:	20400001 	.word	0x20400001

08003b60 <_fflush_r>:
 8003b60:	690b      	ldr	r3, [r1, #16]
 8003b62:	b570      	push	{r4, r5, r6, lr}
 8003b64:	0005      	movs	r5, r0
 8003b66:	000c      	movs	r4, r1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <_fflush_r+0x12>
 8003b6c:	2500      	movs	r5, #0
 8003b6e:	0028      	movs	r0, r5
 8003b70:	bd70      	pop	{r4, r5, r6, pc}
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d004      	beq.n	8003b80 <_fflush_r+0x20>
 8003b76:	6983      	ldr	r3, [r0, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <_fflush_r+0x20>
 8003b7c:	f000 f892 	bl	8003ca4 <__sinit>
 8003b80:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <_fflush_r+0x74>)
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d11b      	bne.n	8003bbe <_fflush_r+0x5e>
 8003b86:	686c      	ldr	r4, [r5, #4]
 8003b88:	220c      	movs	r2, #12
 8003b8a:	5ea3      	ldrsh	r3, [r4, r2]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ed      	beq.n	8003b6c <_fflush_r+0xc>
 8003b90:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003b92:	07d2      	lsls	r2, r2, #31
 8003b94:	d404      	bmi.n	8003ba0 <_fflush_r+0x40>
 8003b96:	059b      	lsls	r3, r3, #22
 8003b98:	d402      	bmi.n	8003ba0 <_fflush_r+0x40>
 8003b9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b9c:	f000 f923 	bl	8003de6 <__retarget_lock_acquire_recursive>
 8003ba0:	0028      	movs	r0, r5
 8003ba2:	0021      	movs	r1, r4
 8003ba4:	f7ff ff50 	bl	8003a48 <__sflush_r>
 8003ba8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003baa:	0005      	movs	r5, r0
 8003bac:	07db      	lsls	r3, r3, #31
 8003bae:	d4de      	bmi.n	8003b6e <_fflush_r+0xe>
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	059b      	lsls	r3, r3, #22
 8003bb4:	d4db      	bmi.n	8003b6e <_fflush_r+0xe>
 8003bb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bb8:	f000 f916 	bl	8003de8 <__retarget_lock_release_recursive>
 8003bbc:	e7d7      	b.n	8003b6e <_fflush_r+0xe>
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <_fflush_r+0x78>)
 8003bc0:	429c      	cmp	r4, r3
 8003bc2:	d101      	bne.n	8003bc8 <_fflush_r+0x68>
 8003bc4:	68ac      	ldr	r4, [r5, #8]
 8003bc6:	e7df      	b.n	8003b88 <_fflush_r+0x28>
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <_fflush_r+0x7c>)
 8003bca:	429c      	cmp	r4, r3
 8003bcc:	d1dc      	bne.n	8003b88 <_fflush_r+0x28>
 8003bce:	68ec      	ldr	r4, [r5, #12]
 8003bd0:	e7da      	b.n	8003b88 <_fflush_r+0x28>
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	080049a0 	.word	0x080049a0
 8003bd8:	080049c0 	.word	0x080049c0
 8003bdc:	08004980 	.word	0x08004980

08003be0 <std>:
 8003be0:	2300      	movs	r3, #0
 8003be2:	b510      	push	{r4, lr}
 8003be4:	0004      	movs	r4, r0
 8003be6:	6003      	str	r3, [r0, #0]
 8003be8:	6043      	str	r3, [r0, #4]
 8003bea:	6083      	str	r3, [r0, #8]
 8003bec:	8181      	strh	r1, [r0, #12]
 8003bee:	6643      	str	r3, [r0, #100]	; 0x64
 8003bf0:	0019      	movs	r1, r3
 8003bf2:	81c2      	strh	r2, [r0, #14]
 8003bf4:	6103      	str	r3, [r0, #16]
 8003bf6:	6143      	str	r3, [r0, #20]
 8003bf8:	6183      	str	r3, [r0, #24]
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	305c      	adds	r0, #92	; 0x5c
 8003bfe:	f7ff fda3 	bl	8003748 <memset>
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <std+0x38>)
 8003c04:	6224      	str	r4, [r4, #32]
 8003c06:	6263      	str	r3, [r4, #36]	; 0x24
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <std+0x3c>)
 8003c0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c0c:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <std+0x40>)
 8003c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <std+0x44>)
 8003c12:	6323      	str	r3, [r4, #48]	; 0x30
 8003c14:	bd10      	pop	{r4, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	08004709 	.word	0x08004709
 8003c1c:	08004731 	.word	0x08004731
 8003c20:	08004769 	.word	0x08004769
 8003c24:	08004795 	.word	0x08004795

08003c28 <_cleanup_r>:
 8003c28:	b510      	push	{r4, lr}
 8003c2a:	4902      	ldr	r1, [pc, #8]	; (8003c34 <_cleanup_r+0xc>)
 8003c2c:	f000 f8ba 	bl	8003da4 <_fwalk_reent>
 8003c30:	bd10      	pop	{r4, pc}
 8003c32:	46c0      	nop			; (mov r8, r8)
 8003c34:	08003b61 	.word	0x08003b61

08003c38 <__sfmoreglue>:
 8003c38:	b570      	push	{r4, r5, r6, lr}
 8003c3a:	2568      	movs	r5, #104	; 0x68
 8003c3c:	1e4a      	subs	r2, r1, #1
 8003c3e:	4355      	muls	r5, r2
 8003c40:	000e      	movs	r6, r1
 8003c42:	0029      	movs	r1, r5
 8003c44:	3174      	adds	r1, #116	; 0x74
 8003c46:	f000 f9a9 	bl	8003f9c <_malloc_r>
 8003c4a:	1e04      	subs	r4, r0, #0
 8003c4c:	d008      	beq.n	8003c60 <__sfmoreglue+0x28>
 8003c4e:	2100      	movs	r1, #0
 8003c50:	002a      	movs	r2, r5
 8003c52:	6001      	str	r1, [r0, #0]
 8003c54:	6046      	str	r6, [r0, #4]
 8003c56:	300c      	adds	r0, #12
 8003c58:	60a0      	str	r0, [r4, #8]
 8003c5a:	3268      	adds	r2, #104	; 0x68
 8003c5c:	f7ff fd74 	bl	8003748 <memset>
 8003c60:	0020      	movs	r0, r4
 8003c62:	bd70      	pop	{r4, r5, r6, pc}

08003c64 <__sfp_lock_acquire>:
 8003c64:	b510      	push	{r4, lr}
 8003c66:	4802      	ldr	r0, [pc, #8]	; (8003c70 <__sfp_lock_acquire+0xc>)
 8003c68:	f000 f8bd 	bl	8003de6 <__retarget_lock_acquire_recursive>
 8003c6c:	bd10      	pop	{r4, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	200003c5 	.word	0x200003c5

08003c74 <__sfp_lock_release>:
 8003c74:	b510      	push	{r4, lr}
 8003c76:	4802      	ldr	r0, [pc, #8]	; (8003c80 <__sfp_lock_release+0xc>)
 8003c78:	f000 f8b6 	bl	8003de8 <__retarget_lock_release_recursive>
 8003c7c:	bd10      	pop	{r4, pc}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	200003c5 	.word	0x200003c5

08003c84 <__sinit_lock_acquire>:
 8003c84:	b510      	push	{r4, lr}
 8003c86:	4802      	ldr	r0, [pc, #8]	; (8003c90 <__sinit_lock_acquire+0xc>)
 8003c88:	f000 f8ad 	bl	8003de6 <__retarget_lock_acquire_recursive>
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	200003c6 	.word	0x200003c6

08003c94 <__sinit_lock_release>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <__sinit_lock_release+0xc>)
 8003c98:	f000 f8a6 	bl	8003de8 <__retarget_lock_release_recursive>
 8003c9c:	bd10      	pop	{r4, pc}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	200003c6 	.word	0x200003c6

08003ca4 <__sinit>:
 8003ca4:	b513      	push	{r0, r1, r4, lr}
 8003ca6:	0004      	movs	r4, r0
 8003ca8:	f7ff ffec 	bl	8003c84 <__sinit_lock_acquire>
 8003cac:	69a3      	ldr	r3, [r4, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <__sinit+0x14>
 8003cb2:	f7ff ffef 	bl	8003c94 <__sinit_lock_release>
 8003cb6:	bd13      	pop	{r0, r1, r4, pc}
 8003cb8:	64a3      	str	r3, [r4, #72]	; 0x48
 8003cba:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003cbc:	6523      	str	r3, [r4, #80]	; 0x50
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <__sinit+0x68>)
 8003cc0:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <__sinit+0x6c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	d101      	bne.n	8003cd0 <__sinit+0x2c>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	61a3      	str	r3, [r4, #24]
 8003cd0:	0020      	movs	r0, r4
 8003cd2:	f000 f81f 	bl	8003d14 <__sfp>
 8003cd6:	6060      	str	r0, [r4, #4]
 8003cd8:	0020      	movs	r0, r4
 8003cda:	f000 f81b 	bl	8003d14 <__sfp>
 8003cde:	60a0      	str	r0, [r4, #8]
 8003ce0:	0020      	movs	r0, r4
 8003ce2:	f000 f817 	bl	8003d14 <__sfp>
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2104      	movs	r1, #4
 8003cea:	60e0      	str	r0, [r4, #12]
 8003cec:	6860      	ldr	r0, [r4, #4]
 8003cee:	f7ff ff77 	bl	8003be0 <std>
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2109      	movs	r1, #9
 8003cf6:	68a0      	ldr	r0, [r4, #8]
 8003cf8:	f7ff ff72 	bl	8003be0 <std>
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	2112      	movs	r1, #18
 8003d00:	68e0      	ldr	r0, [r4, #12]
 8003d02:	f7ff ff6d 	bl	8003be0 <std>
 8003d06:	2301      	movs	r3, #1
 8003d08:	61a3      	str	r3, [r4, #24]
 8003d0a:	e7d2      	b.n	8003cb2 <__sinit+0xe>
 8003d0c:	0800497c 	.word	0x0800497c
 8003d10:	08003c29 	.word	0x08003c29

08003d14 <__sfp>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	0007      	movs	r7, r0
 8003d18:	f7ff ffa4 	bl	8003c64 <__sfp_lock_acquire>
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	; (8003d9c <__sfp+0x88>)
 8003d1e:	681e      	ldr	r6, [r3, #0]
 8003d20:	69b3      	ldr	r3, [r6, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <__sfp+0x18>
 8003d26:	0030      	movs	r0, r6
 8003d28:	f7ff ffbc 	bl	8003ca4 <__sinit>
 8003d2c:	3648      	adds	r6, #72	; 0x48
 8003d2e:	68b4      	ldr	r4, [r6, #8]
 8003d30:	6873      	ldr	r3, [r6, #4]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	d504      	bpl.n	8003d40 <__sfp+0x2c>
 8003d36:	6833      	ldr	r3, [r6, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d022      	beq.n	8003d82 <__sfp+0x6e>
 8003d3c:	6836      	ldr	r6, [r6, #0]
 8003d3e:	e7f6      	b.n	8003d2e <__sfp+0x1a>
 8003d40:	220c      	movs	r2, #12
 8003d42:	5ea5      	ldrsh	r5, [r4, r2]
 8003d44:	2d00      	cmp	r5, #0
 8003d46:	d11a      	bne.n	8003d7e <__sfp+0x6a>
 8003d48:	0020      	movs	r0, r4
 8003d4a:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <__sfp+0x8c>)
 8003d4c:	3058      	adds	r0, #88	; 0x58
 8003d4e:	60e3      	str	r3, [r4, #12]
 8003d50:	6665      	str	r5, [r4, #100]	; 0x64
 8003d52:	f000 f847 	bl	8003de4 <__retarget_lock_init_recursive>
 8003d56:	f7ff ff8d 	bl	8003c74 <__sfp_lock_release>
 8003d5a:	0020      	movs	r0, r4
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	0029      	movs	r1, r5
 8003d60:	6025      	str	r5, [r4, #0]
 8003d62:	60a5      	str	r5, [r4, #8]
 8003d64:	6065      	str	r5, [r4, #4]
 8003d66:	6125      	str	r5, [r4, #16]
 8003d68:	6165      	str	r5, [r4, #20]
 8003d6a:	61a5      	str	r5, [r4, #24]
 8003d6c:	305c      	adds	r0, #92	; 0x5c
 8003d6e:	f7ff fceb 	bl	8003748 <memset>
 8003d72:	6365      	str	r5, [r4, #52]	; 0x34
 8003d74:	63a5      	str	r5, [r4, #56]	; 0x38
 8003d76:	64a5      	str	r5, [r4, #72]	; 0x48
 8003d78:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003d7a:	0020      	movs	r0, r4
 8003d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d7e:	3468      	adds	r4, #104	; 0x68
 8003d80:	e7d7      	b.n	8003d32 <__sfp+0x1e>
 8003d82:	2104      	movs	r1, #4
 8003d84:	0038      	movs	r0, r7
 8003d86:	f7ff ff57 	bl	8003c38 <__sfmoreglue>
 8003d8a:	1e04      	subs	r4, r0, #0
 8003d8c:	6030      	str	r0, [r6, #0]
 8003d8e:	d1d5      	bne.n	8003d3c <__sfp+0x28>
 8003d90:	f7ff ff70 	bl	8003c74 <__sfp_lock_release>
 8003d94:	230c      	movs	r3, #12
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	e7ef      	b.n	8003d7a <__sfp+0x66>
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	0800497c 	.word	0x0800497c
 8003da0:	ffff0001 	.word	0xffff0001

08003da4 <_fwalk_reent>:
 8003da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003da6:	0004      	movs	r4, r0
 8003da8:	0006      	movs	r6, r0
 8003daa:	2700      	movs	r7, #0
 8003dac:	9101      	str	r1, [sp, #4]
 8003dae:	3448      	adds	r4, #72	; 0x48
 8003db0:	6863      	ldr	r3, [r4, #4]
 8003db2:	68a5      	ldr	r5, [r4, #8]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	9b00      	ldr	r3, [sp, #0]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	d504      	bpl.n	8003dc8 <_fwalk_reent+0x24>
 8003dbe:	6824      	ldr	r4, [r4, #0]
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d1f5      	bne.n	8003db0 <_fwalk_reent+0xc>
 8003dc4:	0038      	movs	r0, r7
 8003dc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dc8:	89ab      	ldrh	r3, [r5, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d908      	bls.n	8003de0 <_fwalk_reent+0x3c>
 8003dce:	220e      	movs	r2, #14
 8003dd0:	5eab      	ldrsh	r3, [r5, r2]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	d004      	beq.n	8003de0 <_fwalk_reent+0x3c>
 8003dd6:	0029      	movs	r1, r5
 8003dd8:	0030      	movs	r0, r6
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	4798      	blx	r3
 8003dde:	4307      	orrs	r7, r0
 8003de0:	3568      	adds	r5, #104	; 0x68
 8003de2:	e7e8      	b.n	8003db6 <_fwalk_reent+0x12>

08003de4 <__retarget_lock_init_recursive>:
 8003de4:	4770      	bx	lr

08003de6 <__retarget_lock_acquire_recursive>:
 8003de6:	4770      	bx	lr

08003de8 <__retarget_lock_release_recursive>:
 8003de8:	4770      	bx	lr
	...

08003dec <__swhatbuf_r>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	000e      	movs	r6, r1
 8003df0:	001d      	movs	r5, r3
 8003df2:	230e      	movs	r3, #14
 8003df4:	5ec9      	ldrsh	r1, [r1, r3]
 8003df6:	0014      	movs	r4, r2
 8003df8:	b096      	sub	sp, #88	; 0x58
 8003dfa:	2900      	cmp	r1, #0
 8003dfc:	da08      	bge.n	8003e10 <__swhatbuf_r+0x24>
 8003dfe:	220c      	movs	r2, #12
 8003e00:	5eb3      	ldrsh	r3, [r6, r2]
 8003e02:	2200      	movs	r2, #0
 8003e04:	602a      	str	r2, [r5, #0]
 8003e06:	061b      	lsls	r3, r3, #24
 8003e08:	d411      	bmi.n	8003e2e <__swhatbuf_r+0x42>
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	e00f      	b.n	8003e30 <__swhatbuf_r+0x44>
 8003e10:	466a      	mov	r2, sp
 8003e12:	f000 fceb 	bl	80047ec <_fstat_r>
 8003e16:	2800      	cmp	r0, #0
 8003e18:	dbf1      	blt.n	8003dfe <__swhatbuf_r+0x12>
 8003e1a:	23f0      	movs	r3, #240	; 0xf0
 8003e1c:	9901      	ldr	r1, [sp, #4]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	4019      	ands	r1, r3
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <__swhatbuf_r+0x4c>)
 8003e24:	18c9      	adds	r1, r1, r3
 8003e26:	424b      	negs	r3, r1
 8003e28:	4159      	adcs	r1, r3
 8003e2a:	6029      	str	r1, [r5, #0]
 8003e2c:	e7ed      	b.n	8003e0a <__swhatbuf_r+0x1e>
 8003e2e:	2340      	movs	r3, #64	; 0x40
 8003e30:	2000      	movs	r0, #0
 8003e32:	6023      	str	r3, [r4, #0]
 8003e34:	b016      	add	sp, #88	; 0x58
 8003e36:	bd70      	pop	{r4, r5, r6, pc}
 8003e38:	ffffe000 	.word	0xffffe000

08003e3c <__smakebuf_r>:
 8003e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e3e:	2602      	movs	r6, #2
 8003e40:	898b      	ldrh	r3, [r1, #12]
 8003e42:	0005      	movs	r5, r0
 8003e44:	000c      	movs	r4, r1
 8003e46:	4233      	tst	r3, r6
 8003e48:	d006      	beq.n	8003e58 <__smakebuf_r+0x1c>
 8003e4a:	0023      	movs	r3, r4
 8003e4c:	3347      	adds	r3, #71	; 0x47
 8003e4e:	6023      	str	r3, [r4, #0]
 8003e50:	6123      	str	r3, [r4, #16]
 8003e52:	2301      	movs	r3, #1
 8003e54:	6163      	str	r3, [r4, #20]
 8003e56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003e58:	466a      	mov	r2, sp
 8003e5a:	ab01      	add	r3, sp, #4
 8003e5c:	f7ff ffc6 	bl	8003dec <__swhatbuf_r>
 8003e60:	9900      	ldr	r1, [sp, #0]
 8003e62:	0007      	movs	r7, r0
 8003e64:	0028      	movs	r0, r5
 8003e66:	f000 f899 	bl	8003f9c <_malloc_r>
 8003e6a:	2800      	cmp	r0, #0
 8003e6c:	d108      	bne.n	8003e80 <__smakebuf_r+0x44>
 8003e6e:	220c      	movs	r2, #12
 8003e70:	5ea3      	ldrsh	r3, [r4, r2]
 8003e72:	059a      	lsls	r2, r3, #22
 8003e74:	d4ef      	bmi.n	8003e56 <__smakebuf_r+0x1a>
 8003e76:	2203      	movs	r2, #3
 8003e78:	4393      	bics	r3, r2
 8003e7a:	431e      	orrs	r6, r3
 8003e7c:	81a6      	strh	r6, [r4, #12]
 8003e7e:	e7e4      	b.n	8003e4a <__smakebuf_r+0xe>
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <__smakebuf_r+0x84>)
 8003e82:	62ab      	str	r3, [r5, #40]	; 0x28
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	89a2      	ldrh	r2, [r4, #12]
 8003e88:	6020      	str	r0, [r4, #0]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	81a3      	strh	r3, [r4, #12]
 8003e8e:	9b00      	ldr	r3, [sp, #0]
 8003e90:	6120      	str	r0, [r4, #16]
 8003e92:	6163      	str	r3, [r4, #20]
 8003e94:	9b01      	ldr	r3, [sp, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <__smakebuf_r+0x7a>
 8003e9a:	0028      	movs	r0, r5
 8003e9c:	230e      	movs	r3, #14
 8003e9e:	5ee1      	ldrsh	r1, [r4, r3]
 8003ea0:	f000 fcb6 	bl	8004810 <_isatty_r>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d006      	beq.n	8003eb6 <__smakebuf_r+0x7a>
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	89a3      	ldrh	r3, [r4, #12]
 8003eac:	4393      	bics	r3, r2
 8003eae:	001a      	movs	r2, r3
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	81a3      	strh	r3, [r4, #12]
 8003eb6:	89a0      	ldrh	r0, [r4, #12]
 8003eb8:	4307      	orrs	r7, r0
 8003eba:	81a7      	strh	r7, [r4, #12]
 8003ebc:	e7cb      	b.n	8003e56 <__smakebuf_r+0x1a>
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	08003c29 	.word	0x08003c29

08003ec4 <_free_r>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	0005      	movs	r5, r0
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d010      	beq.n	8003eee <_free_r+0x2a>
 8003ecc:	1f0c      	subs	r4, r1, #4
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da00      	bge.n	8003ed6 <_free_r+0x12>
 8003ed4:	18e4      	adds	r4, r4, r3
 8003ed6:	0028      	movs	r0, r5
 8003ed8:	f000 fccc 	bl	8004874 <__malloc_lock>
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <_free_r+0x90>)
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <_free_r+0x2c>
 8003ee4:	6063      	str	r3, [r4, #4]
 8003ee6:	6014      	str	r4, [r2, #0]
 8003ee8:	0028      	movs	r0, r5
 8003eea:	f000 fccb 	bl	8004884 <__malloc_unlock>
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	d908      	bls.n	8003f06 <_free_r+0x42>
 8003ef4:	6821      	ldr	r1, [r4, #0]
 8003ef6:	1860      	adds	r0, r4, r1
 8003ef8:	4283      	cmp	r3, r0
 8003efa:	d1f3      	bne.n	8003ee4 <_free_r+0x20>
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	1841      	adds	r1, r0, r1
 8003f02:	6021      	str	r1, [r4, #0]
 8003f04:	e7ee      	b.n	8003ee4 <_free_r+0x20>
 8003f06:	001a      	movs	r2, r3
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <_free_r+0x4e>
 8003f0e:	42a3      	cmp	r3, r4
 8003f10:	d9f9      	bls.n	8003f06 <_free_r+0x42>
 8003f12:	6811      	ldr	r1, [r2, #0]
 8003f14:	1850      	adds	r0, r2, r1
 8003f16:	42a0      	cmp	r0, r4
 8003f18:	d10b      	bne.n	8003f32 <_free_r+0x6e>
 8003f1a:	6820      	ldr	r0, [r4, #0]
 8003f1c:	1809      	adds	r1, r1, r0
 8003f1e:	1850      	adds	r0, r2, r1
 8003f20:	6011      	str	r1, [r2, #0]
 8003f22:	4283      	cmp	r3, r0
 8003f24:	d1e0      	bne.n	8003ee8 <_free_r+0x24>
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	1841      	adds	r1, r0, r1
 8003f2c:	6011      	str	r1, [r2, #0]
 8003f2e:	6053      	str	r3, [r2, #4]
 8003f30:	e7da      	b.n	8003ee8 <_free_r+0x24>
 8003f32:	42a0      	cmp	r0, r4
 8003f34:	d902      	bls.n	8003f3c <_free_r+0x78>
 8003f36:	230c      	movs	r3, #12
 8003f38:	602b      	str	r3, [r5, #0]
 8003f3a:	e7d5      	b.n	8003ee8 <_free_r+0x24>
 8003f3c:	6821      	ldr	r1, [r4, #0]
 8003f3e:	1860      	adds	r0, r4, r1
 8003f40:	4283      	cmp	r3, r0
 8003f42:	d103      	bne.n	8003f4c <_free_r+0x88>
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	1841      	adds	r1, r0, r1
 8003f4a:	6021      	str	r1, [r4, #0]
 8003f4c:	6063      	str	r3, [r4, #4]
 8003f4e:	6054      	str	r4, [r2, #4]
 8003f50:	e7ca      	b.n	8003ee8 <_free_r+0x24>
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	200003c8 	.word	0x200003c8

08003f58 <sbrk_aligned>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4e0f      	ldr	r6, [pc, #60]	; (8003f98 <sbrk_aligned+0x40>)
 8003f5c:	000d      	movs	r5, r1
 8003f5e:	6831      	ldr	r1, [r6, #0]
 8003f60:	0004      	movs	r4, r0
 8003f62:	2900      	cmp	r1, #0
 8003f64:	d102      	bne.n	8003f6c <sbrk_aligned+0x14>
 8003f66:	f000 fbbd 	bl	80046e4 <_sbrk_r>
 8003f6a:	6030      	str	r0, [r6, #0]
 8003f6c:	0029      	movs	r1, r5
 8003f6e:	0020      	movs	r0, r4
 8003f70:	f000 fbb8 	bl	80046e4 <_sbrk_r>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d00a      	beq.n	8003f8e <sbrk_aligned+0x36>
 8003f78:	2303      	movs	r3, #3
 8003f7a:	1cc5      	adds	r5, r0, #3
 8003f7c:	439d      	bics	r5, r3
 8003f7e:	42a8      	cmp	r0, r5
 8003f80:	d007      	beq.n	8003f92 <sbrk_aligned+0x3a>
 8003f82:	1a29      	subs	r1, r5, r0
 8003f84:	0020      	movs	r0, r4
 8003f86:	f000 fbad 	bl	80046e4 <_sbrk_r>
 8003f8a:	1c43      	adds	r3, r0, #1
 8003f8c:	d101      	bne.n	8003f92 <sbrk_aligned+0x3a>
 8003f8e:	2501      	movs	r5, #1
 8003f90:	426d      	negs	r5, r5
 8003f92:	0028      	movs	r0, r5
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	200003cc 	.word	0x200003cc

08003f9c <_malloc_r>:
 8003f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	1ccb      	adds	r3, r1, #3
 8003fa2:	4393      	bics	r3, r2
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	0006      	movs	r6, r0
 8003fa8:	001f      	movs	r7, r3
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d232      	bcs.n	8004014 <_malloc_r+0x78>
 8003fae:	270c      	movs	r7, #12
 8003fb0:	42b9      	cmp	r1, r7
 8003fb2:	d831      	bhi.n	8004018 <_malloc_r+0x7c>
 8003fb4:	0030      	movs	r0, r6
 8003fb6:	f000 fc5d 	bl	8004874 <__malloc_lock>
 8003fba:	4d32      	ldr	r5, [pc, #200]	; (8004084 <_malloc_r+0xe8>)
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	001c      	movs	r4, r3
 8003fc0:	2c00      	cmp	r4, #0
 8003fc2:	d12e      	bne.n	8004022 <_malloc_r+0x86>
 8003fc4:	0039      	movs	r1, r7
 8003fc6:	0030      	movs	r0, r6
 8003fc8:	f7ff ffc6 	bl	8003f58 <sbrk_aligned>
 8003fcc:	0004      	movs	r4, r0
 8003fce:	1c43      	adds	r3, r0, #1
 8003fd0:	d11e      	bne.n	8004010 <_malloc_r+0x74>
 8003fd2:	682c      	ldr	r4, [r5, #0]
 8003fd4:	0025      	movs	r5, r4
 8003fd6:	2d00      	cmp	r5, #0
 8003fd8:	d14a      	bne.n	8004070 <_malloc_r+0xd4>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	0029      	movs	r1, r5
 8003fde:	18e3      	adds	r3, r4, r3
 8003fe0:	0030      	movs	r0, r6
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	f000 fb7e 	bl	80046e4 <_sbrk_r>
 8003fe8:	9b01      	ldr	r3, [sp, #4]
 8003fea:	4283      	cmp	r3, r0
 8003fec:	d143      	bne.n	8004076 <_malloc_r+0xda>
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	3703      	adds	r7, #3
 8003ff2:	1aff      	subs	r7, r7, r3
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	439f      	bics	r7, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	2f0c      	cmp	r7, #12
 8003ffc:	d200      	bcs.n	8004000 <_malloc_r+0x64>
 8003ffe:	270c      	movs	r7, #12
 8004000:	0039      	movs	r1, r7
 8004002:	0030      	movs	r0, r6
 8004004:	f7ff ffa8 	bl	8003f58 <sbrk_aligned>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d034      	beq.n	8004076 <_malloc_r+0xda>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	19df      	adds	r7, r3, r7
 8004010:	6027      	str	r7, [r4, #0]
 8004012:	e013      	b.n	800403c <_malloc_r+0xa0>
 8004014:	2b00      	cmp	r3, #0
 8004016:	dacb      	bge.n	8003fb0 <_malloc_r+0x14>
 8004018:	230c      	movs	r3, #12
 800401a:	2500      	movs	r5, #0
 800401c:	6033      	str	r3, [r6, #0]
 800401e:	0028      	movs	r0, r5
 8004020:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004022:	6822      	ldr	r2, [r4, #0]
 8004024:	1bd1      	subs	r1, r2, r7
 8004026:	d420      	bmi.n	800406a <_malloc_r+0xce>
 8004028:	290b      	cmp	r1, #11
 800402a:	d917      	bls.n	800405c <_malloc_r+0xc0>
 800402c:	19e2      	adds	r2, r4, r7
 800402e:	6027      	str	r7, [r4, #0]
 8004030:	42a3      	cmp	r3, r4
 8004032:	d111      	bne.n	8004058 <_malloc_r+0xbc>
 8004034:	602a      	str	r2, [r5, #0]
 8004036:	6863      	ldr	r3, [r4, #4]
 8004038:	6011      	str	r1, [r2, #0]
 800403a:	6053      	str	r3, [r2, #4]
 800403c:	0030      	movs	r0, r6
 800403e:	0025      	movs	r5, r4
 8004040:	f000 fc20 	bl	8004884 <__malloc_unlock>
 8004044:	2207      	movs	r2, #7
 8004046:	350b      	adds	r5, #11
 8004048:	1d23      	adds	r3, r4, #4
 800404a:	4395      	bics	r5, r2
 800404c:	1aea      	subs	r2, r5, r3
 800404e:	429d      	cmp	r5, r3
 8004050:	d0e5      	beq.n	800401e <_malloc_r+0x82>
 8004052:	1b5b      	subs	r3, r3, r5
 8004054:	50a3      	str	r3, [r4, r2]
 8004056:	e7e2      	b.n	800401e <_malloc_r+0x82>
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	e7ec      	b.n	8004036 <_malloc_r+0x9a>
 800405c:	6862      	ldr	r2, [r4, #4]
 800405e:	42a3      	cmp	r3, r4
 8004060:	d101      	bne.n	8004066 <_malloc_r+0xca>
 8004062:	602a      	str	r2, [r5, #0]
 8004064:	e7ea      	b.n	800403c <_malloc_r+0xa0>
 8004066:	605a      	str	r2, [r3, #4]
 8004068:	e7e8      	b.n	800403c <_malloc_r+0xa0>
 800406a:	0023      	movs	r3, r4
 800406c:	6864      	ldr	r4, [r4, #4]
 800406e:	e7a7      	b.n	8003fc0 <_malloc_r+0x24>
 8004070:	002c      	movs	r4, r5
 8004072:	686d      	ldr	r5, [r5, #4]
 8004074:	e7af      	b.n	8003fd6 <_malloc_r+0x3a>
 8004076:	230c      	movs	r3, #12
 8004078:	0030      	movs	r0, r6
 800407a:	6033      	str	r3, [r6, #0]
 800407c:	f000 fc02 	bl	8004884 <__malloc_unlock>
 8004080:	e7cd      	b.n	800401e <_malloc_r+0x82>
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	200003c8 	.word	0x200003c8

08004088 <__sfputc_r>:
 8004088:	6893      	ldr	r3, [r2, #8]
 800408a:	b510      	push	{r4, lr}
 800408c:	3b01      	subs	r3, #1
 800408e:	6093      	str	r3, [r2, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	da04      	bge.n	800409e <__sfputc_r+0x16>
 8004094:	6994      	ldr	r4, [r2, #24]
 8004096:	42a3      	cmp	r3, r4
 8004098:	db07      	blt.n	80040aa <__sfputc_r+0x22>
 800409a:	290a      	cmp	r1, #10
 800409c:	d005      	beq.n	80040aa <__sfputc_r+0x22>
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	1c58      	adds	r0, r3, #1
 80040a2:	6010      	str	r0, [r2, #0]
 80040a4:	7019      	strb	r1, [r3, #0]
 80040a6:	0008      	movs	r0, r1
 80040a8:	bd10      	pop	{r4, pc}
 80040aa:	f7ff fbff 	bl	80038ac <__swbuf_r>
 80040ae:	0001      	movs	r1, r0
 80040b0:	e7f9      	b.n	80040a6 <__sfputc_r+0x1e>

080040b2 <__sfputs_r>:
 80040b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b4:	0006      	movs	r6, r0
 80040b6:	000f      	movs	r7, r1
 80040b8:	0014      	movs	r4, r2
 80040ba:	18d5      	adds	r5, r2, r3
 80040bc:	42ac      	cmp	r4, r5
 80040be:	d101      	bne.n	80040c4 <__sfputs_r+0x12>
 80040c0:	2000      	movs	r0, #0
 80040c2:	e007      	b.n	80040d4 <__sfputs_r+0x22>
 80040c4:	7821      	ldrb	r1, [r4, #0]
 80040c6:	003a      	movs	r2, r7
 80040c8:	0030      	movs	r0, r6
 80040ca:	f7ff ffdd 	bl	8004088 <__sfputc_r>
 80040ce:	3401      	adds	r4, #1
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d1f3      	bne.n	80040bc <__sfputs_r+0xa>
 80040d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040d8 <_vfiprintf_r>:
 80040d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040da:	b0a1      	sub	sp, #132	; 0x84
 80040dc:	0006      	movs	r6, r0
 80040de:	000c      	movs	r4, r1
 80040e0:	001f      	movs	r7, r3
 80040e2:	9203      	str	r2, [sp, #12]
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d004      	beq.n	80040f2 <_vfiprintf_r+0x1a>
 80040e8:	6983      	ldr	r3, [r0, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <_vfiprintf_r+0x1a>
 80040ee:	f7ff fdd9 	bl	8003ca4 <__sinit>
 80040f2:	4b8e      	ldr	r3, [pc, #568]	; (800432c <_vfiprintf_r+0x254>)
 80040f4:	429c      	cmp	r4, r3
 80040f6:	d11c      	bne.n	8004132 <_vfiprintf_r+0x5a>
 80040f8:	6874      	ldr	r4, [r6, #4]
 80040fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040fc:	07db      	lsls	r3, r3, #31
 80040fe:	d405      	bmi.n	800410c <_vfiprintf_r+0x34>
 8004100:	89a3      	ldrh	r3, [r4, #12]
 8004102:	059b      	lsls	r3, r3, #22
 8004104:	d402      	bmi.n	800410c <_vfiprintf_r+0x34>
 8004106:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004108:	f7ff fe6d 	bl	8003de6 <__retarget_lock_acquire_recursive>
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	071b      	lsls	r3, r3, #28
 8004110:	d502      	bpl.n	8004118 <_vfiprintf_r+0x40>
 8004112:	6923      	ldr	r3, [r4, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d11d      	bne.n	8004154 <_vfiprintf_r+0x7c>
 8004118:	0021      	movs	r1, r4
 800411a:	0030      	movs	r0, r6
 800411c:	f7ff fc1c 	bl	8003958 <__swsetup_r>
 8004120:	2800      	cmp	r0, #0
 8004122:	d017      	beq.n	8004154 <_vfiprintf_r+0x7c>
 8004124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004126:	07db      	lsls	r3, r3, #31
 8004128:	d50d      	bpl.n	8004146 <_vfiprintf_r+0x6e>
 800412a:	2001      	movs	r0, #1
 800412c:	4240      	negs	r0, r0
 800412e:	b021      	add	sp, #132	; 0x84
 8004130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004132:	4b7f      	ldr	r3, [pc, #508]	; (8004330 <_vfiprintf_r+0x258>)
 8004134:	429c      	cmp	r4, r3
 8004136:	d101      	bne.n	800413c <_vfiprintf_r+0x64>
 8004138:	68b4      	ldr	r4, [r6, #8]
 800413a:	e7de      	b.n	80040fa <_vfiprintf_r+0x22>
 800413c:	4b7d      	ldr	r3, [pc, #500]	; (8004334 <_vfiprintf_r+0x25c>)
 800413e:	429c      	cmp	r4, r3
 8004140:	d1db      	bne.n	80040fa <_vfiprintf_r+0x22>
 8004142:	68f4      	ldr	r4, [r6, #12]
 8004144:	e7d9      	b.n	80040fa <_vfiprintf_r+0x22>
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	059b      	lsls	r3, r3, #22
 800414a:	d4ee      	bmi.n	800412a <_vfiprintf_r+0x52>
 800414c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800414e:	f7ff fe4b 	bl	8003de8 <__retarget_lock_release_recursive>
 8004152:	e7ea      	b.n	800412a <_vfiprintf_r+0x52>
 8004154:	2300      	movs	r3, #0
 8004156:	ad08      	add	r5, sp, #32
 8004158:	616b      	str	r3, [r5, #20]
 800415a:	3320      	adds	r3, #32
 800415c:	766b      	strb	r3, [r5, #25]
 800415e:	3310      	adds	r3, #16
 8004160:	76ab      	strb	r3, [r5, #26]
 8004162:	9707      	str	r7, [sp, #28]
 8004164:	9f03      	ldr	r7, [sp, #12]
 8004166:	783b      	ldrb	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <_vfiprintf_r+0x98>
 800416c:	2b25      	cmp	r3, #37	; 0x25
 800416e:	d14e      	bne.n	800420e <_vfiprintf_r+0x136>
 8004170:	9b03      	ldr	r3, [sp, #12]
 8004172:	1afb      	subs	r3, r7, r3
 8004174:	9305      	str	r3, [sp, #20]
 8004176:	9b03      	ldr	r3, [sp, #12]
 8004178:	429f      	cmp	r7, r3
 800417a:	d00d      	beq.n	8004198 <_vfiprintf_r+0xc0>
 800417c:	9b05      	ldr	r3, [sp, #20]
 800417e:	0021      	movs	r1, r4
 8004180:	0030      	movs	r0, r6
 8004182:	9a03      	ldr	r2, [sp, #12]
 8004184:	f7ff ff95 	bl	80040b2 <__sfputs_r>
 8004188:	1c43      	adds	r3, r0, #1
 800418a:	d100      	bne.n	800418e <_vfiprintf_r+0xb6>
 800418c:	e0b5      	b.n	80042fa <_vfiprintf_r+0x222>
 800418e:	696a      	ldr	r2, [r5, #20]
 8004190:	9b05      	ldr	r3, [sp, #20]
 8004192:	4694      	mov	ip, r2
 8004194:	4463      	add	r3, ip
 8004196:	616b      	str	r3, [r5, #20]
 8004198:	783b      	ldrb	r3, [r7, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d100      	bne.n	80041a0 <_vfiprintf_r+0xc8>
 800419e:	e0ac      	b.n	80042fa <_vfiprintf_r+0x222>
 80041a0:	2201      	movs	r2, #1
 80041a2:	1c7b      	adds	r3, r7, #1
 80041a4:	9303      	str	r3, [sp, #12]
 80041a6:	2300      	movs	r3, #0
 80041a8:	4252      	negs	r2, r2
 80041aa:	606a      	str	r2, [r5, #4]
 80041ac:	a904      	add	r1, sp, #16
 80041ae:	3254      	adds	r2, #84	; 0x54
 80041b0:	1852      	adds	r2, r2, r1
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	60eb      	str	r3, [r5, #12]
 80041b6:	60ab      	str	r3, [r5, #8]
 80041b8:	7013      	strb	r3, [r2, #0]
 80041ba:	65ab      	str	r3, [r5, #88]	; 0x58
 80041bc:	9b03      	ldr	r3, [sp, #12]
 80041be:	2205      	movs	r2, #5
 80041c0:	7819      	ldrb	r1, [r3, #0]
 80041c2:	485d      	ldr	r0, [pc, #372]	; (8004338 <_vfiprintf_r+0x260>)
 80041c4:	f000 fb4a 	bl	800485c <memchr>
 80041c8:	9b03      	ldr	r3, [sp, #12]
 80041ca:	1c5f      	adds	r7, r3, #1
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d120      	bne.n	8004212 <_vfiprintf_r+0x13a>
 80041d0:	682a      	ldr	r2, [r5, #0]
 80041d2:	06d3      	lsls	r3, r2, #27
 80041d4:	d504      	bpl.n	80041e0 <_vfiprintf_r+0x108>
 80041d6:	2353      	movs	r3, #83	; 0x53
 80041d8:	a904      	add	r1, sp, #16
 80041da:	185b      	adds	r3, r3, r1
 80041dc:	2120      	movs	r1, #32
 80041de:	7019      	strb	r1, [r3, #0]
 80041e0:	0713      	lsls	r3, r2, #28
 80041e2:	d504      	bpl.n	80041ee <_vfiprintf_r+0x116>
 80041e4:	2353      	movs	r3, #83	; 0x53
 80041e6:	a904      	add	r1, sp, #16
 80041e8:	185b      	adds	r3, r3, r1
 80041ea:	212b      	movs	r1, #43	; 0x2b
 80041ec:	7019      	strb	r1, [r3, #0]
 80041ee:	9b03      	ldr	r3, [sp, #12]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b2a      	cmp	r3, #42	; 0x2a
 80041f4:	d016      	beq.n	8004224 <_vfiprintf_r+0x14c>
 80041f6:	2100      	movs	r1, #0
 80041f8:	68eb      	ldr	r3, [r5, #12]
 80041fa:	9f03      	ldr	r7, [sp, #12]
 80041fc:	783a      	ldrb	r2, [r7, #0]
 80041fe:	1c78      	adds	r0, r7, #1
 8004200:	3a30      	subs	r2, #48	; 0x30
 8004202:	4684      	mov	ip, r0
 8004204:	2a09      	cmp	r2, #9
 8004206:	d94f      	bls.n	80042a8 <_vfiprintf_r+0x1d0>
 8004208:	2900      	cmp	r1, #0
 800420a:	d111      	bne.n	8004230 <_vfiprintf_r+0x158>
 800420c:	e017      	b.n	800423e <_vfiprintf_r+0x166>
 800420e:	3701      	adds	r7, #1
 8004210:	e7a9      	b.n	8004166 <_vfiprintf_r+0x8e>
 8004212:	4b49      	ldr	r3, [pc, #292]	; (8004338 <_vfiprintf_r+0x260>)
 8004214:	682a      	ldr	r2, [r5, #0]
 8004216:	1ac0      	subs	r0, r0, r3
 8004218:	2301      	movs	r3, #1
 800421a:	4083      	lsls	r3, r0
 800421c:	4313      	orrs	r3, r2
 800421e:	602b      	str	r3, [r5, #0]
 8004220:	9703      	str	r7, [sp, #12]
 8004222:	e7cb      	b.n	80041bc <_vfiprintf_r+0xe4>
 8004224:	9b07      	ldr	r3, [sp, #28]
 8004226:	1d19      	adds	r1, r3, #4
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	9107      	str	r1, [sp, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	db01      	blt.n	8004234 <_vfiprintf_r+0x15c>
 8004230:	930b      	str	r3, [sp, #44]	; 0x2c
 8004232:	e004      	b.n	800423e <_vfiprintf_r+0x166>
 8004234:	425b      	negs	r3, r3
 8004236:	60eb      	str	r3, [r5, #12]
 8004238:	2302      	movs	r3, #2
 800423a:	4313      	orrs	r3, r2
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	783b      	ldrb	r3, [r7, #0]
 8004240:	2b2e      	cmp	r3, #46	; 0x2e
 8004242:	d10a      	bne.n	800425a <_vfiprintf_r+0x182>
 8004244:	787b      	ldrb	r3, [r7, #1]
 8004246:	2b2a      	cmp	r3, #42	; 0x2a
 8004248:	d137      	bne.n	80042ba <_vfiprintf_r+0x1e2>
 800424a:	9b07      	ldr	r3, [sp, #28]
 800424c:	3702      	adds	r7, #2
 800424e:	1d1a      	adds	r2, r3, #4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	9207      	str	r2, [sp, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	db2d      	blt.n	80042b4 <_vfiprintf_r+0x1dc>
 8004258:	9309      	str	r3, [sp, #36]	; 0x24
 800425a:	2203      	movs	r2, #3
 800425c:	7839      	ldrb	r1, [r7, #0]
 800425e:	4837      	ldr	r0, [pc, #220]	; (800433c <_vfiprintf_r+0x264>)
 8004260:	f000 fafc 	bl	800485c <memchr>
 8004264:	2800      	cmp	r0, #0
 8004266:	d007      	beq.n	8004278 <_vfiprintf_r+0x1a0>
 8004268:	4b34      	ldr	r3, [pc, #208]	; (800433c <_vfiprintf_r+0x264>)
 800426a:	682a      	ldr	r2, [r5, #0]
 800426c:	1ac0      	subs	r0, r0, r3
 800426e:	2340      	movs	r3, #64	; 0x40
 8004270:	4083      	lsls	r3, r0
 8004272:	4313      	orrs	r3, r2
 8004274:	3701      	adds	r7, #1
 8004276:	602b      	str	r3, [r5, #0]
 8004278:	7839      	ldrb	r1, [r7, #0]
 800427a:	1c7b      	adds	r3, r7, #1
 800427c:	2206      	movs	r2, #6
 800427e:	4830      	ldr	r0, [pc, #192]	; (8004340 <_vfiprintf_r+0x268>)
 8004280:	9303      	str	r3, [sp, #12]
 8004282:	7629      	strb	r1, [r5, #24]
 8004284:	f000 faea 	bl	800485c <memchr>
 8004288:	2800      	cmp	r0, #0
 800428a:	d045      	beq.n	8004318 <_vfiprintf_r+0x240>
 800428c:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <_vfiprintf_r+0x26c>)
 800428e:	2b00      	cmp	r3, #0
 8004290:	d127      	bne.n	80042e2 <_vfiprintf_r+0x20a>
 8004292:	2207      	movs	r2, #7
 8004294:	9b07      	ldr	r3, [sp, #28]
 8004296:	3307      	adds	r3, #7
 8004298:	4393      	bics	r3, r2
 800429a:	3308      	adds	r3, #8
 800429c:	9307      	str	r3, [sp, #28]
 800429e:	696b      	ldr	r3, [r5, #20]
 80042a0:	9a04      	ldr	r2, [sp, #16]
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	616b      	str	r3, [r5, #20]
 80042a6:	e75d      	b.n	8004164 <_vfiprintf_r+0x8c>
 80042a8:	210a      	movs	r1, #10
 80042aa:	434b      	muls	r3, r1
 80042ac:	4667      	mov	r7, ip
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	3909      	subs	r1, #9
 80042b2:	e7a3      	b.n	80041fc <_vfiprintf_r+0x124>
 80042b4:	2301      	movs	r3, #1
 80042b6:	425b      	negs	r3, r3
 80042b8:	e7ce      	b.n	8004258 <_vfiprintf_r+0x180>
 80042ba:	2300      	movs	r3, #0
 80042bc:	001a      	movs	r2, r3
 80042be:	3701      	adds	r7, #1
 80042c0:	606b      	str	r3, [r5, #4]
 80042c2:	7839      	ldrb	r1, [r7, #0]
 80042c4:	1c78      	adds	r0, r7, #1
 80042c6:	3930      	subs	r1, #48	; 0x30
 80042c8:	4684      	mov	ip, r0
 80042ca:	2909      	cmp	r1, #9
 80042cc:	d903      	bls.n	80042d6 <_vfiprintf_r+0x1fe>
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0c3      	beq.n	800425a <_vfiprintf_r+0x182>
 80042d2:	9209      	str	r2, [sp, #36]	; 0x24
 80042d4:	e7c1      	b.n	800425a <_vfiprintf_r+0x182>
 80042d6:	230a      	movs	r3, #10
 80042d8:	435a      	muls	r2, r3
 80042da:	4667      	mov	r7, ip
 80042dc:	1852      	adds	r2, r2, r1
 80042de:	3b09      	subs	r3, #9
 80042e0:	e7ef      	b.n	80042c2 <_vfiprintf_r+0x1ea>
 80042e2:	ab07      	add	r3, sp, #28
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	0022      	movs	r2, r4
 80042e8:	0029      	movs	r1, r5
 80042ea:	0030      	movs	r0, r6
 80042ec:	4b16      	ldr	r3, [pc, #88]	; (8004348 <_vfiprintf_r+0x270>)
 80042ee:	e000      	b.n	80042f2 <_vfiprintf_r+0x21a>
 80042f0:	bf00      	nop
 80042f2:	9004      	str	r0, [sp, #16]
 80042f4:	9b04      	ldr	r3, [sp, #16]
 80042f6:	3301      	adds	r3, #1
 80042f8:	d1d1      	bne.n	800429e <_vfiprintf_r+0x1c6>
 80042fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042fc:	07db      	lsls	r3, r3, #31
 80042fe:	d405      	bmi.n	800430c <_vfiprintf_r+0x234>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	059b      	lsls	r3, r3, #22
 8004304:	d402      	bmi.n	800430c <_vfiprintf_r+0x234>
 8004306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004308:	f7ff fd6e 	bl	8003de8 <__retarget_lock_release_recursive>
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	065b      	lsls	r3, r3, #25
 8004310:	d500      	bpl.n	8004314 <_vfiprintf_r+0x23c>
 8004312:	e70a      	b.n	800412a <_vfiprintf_r+0x52>
 8004314:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004316:	e70a      	b.n	800412e <_vfiprintf_r+0x56>
 8004318:	ab07      	add	r3, sp, #28
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	0022      	movs	r2, r4
 800431e:	0029      	movs	r1, r5
 8004320:	0030      	movs	r0, r6
 8004322:	4b09      	ldr	r3, [pc, #36]	; (8004348 <_vfiprintf_r+0x270>)
 8004324:	f000 f882 	bl	800442c <_printf_i>
 8004328:	e7e3      	b.n	80042f2 <_vfiprintf_r+0x21a>
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	080049a0 	.word	0x080049a0
 8004330:	080049c0 	.word	0x080049c0
 8004334:	08004980 	.word	0x08004980
 8004338:	080049e0 	.word	0x080049e0
 800433c:	080049e6 	.word	0x080049e6
 8004340:	080049ea 	.word	0x080049ea
 8004344:	00000000 	.word	0x00000000
 8004348:	080040b3 	.word	0x080040b3

0800434c <_printf_common>:
 800434c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800434e:	0015      	movs	r5, r2
 8004350:	9301      	str	r3, [sp, #4]
 8004352:	688a      	ldr	r2, [r1, #8]
 8004354:	690b      	ldr	r3, [r1, #16]
 8004356:	000c      	movs	r4, r1
 8004358:	9000      	str	r0, [sp, #0]
 800435a:	4293      	cmp	r3, r2
 800435c:	da00      	bge.n	8004360 <_printf_common+0x14>
 800435e:	0013      	movs	r3, r2
 8004360:	0022      	movs	r2, r4
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	3243      	adds	r2, #67	; 0x43
 8004366:	7812      	ldrb	r2, [r2, #0]
 8004368:	2a00      	cmp	r2, #0
 800436a:	d001      	beq.n	8004370 <_printf_common+0x24>
 800436c:	3301      	adds	r3, #1
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	069b      	lsls	r3, r3, #26
 8004374:	d502      	bpl.n	800437c <_printf_common+0x30>
 8004376:	682b      	ldr	r3, [r5, #0]
 8004378:	3302      	adds	r3, #2
 800437a:	602b      	str	r3, [r5, #0]
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	2306      	movs	r3, #6
 8004380:	0017      	movs	r7, r2
 8004382:	401f      	ands	r7, r3
 8004384:	421a      	tst	r2, r3
 8004386:	d027      	beq.n	80043d8 <_printf_common+0x8c>
 8004388:	0023      	movs	r3, r4
 800438a:	3343      	adds	r3, #67	; 0x43
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	1e5a      	subs	r2, r3, #1
 8004390:	4193      	sbcs	r3, r2
 8004392:	6822      	ldr	r2, [r4, #0]
 8004394:	0692      	lsls	r2, r2, #26
 8004396:	d430      	bmi.n	80043fa <_printf_common+0xae>
 8004398:	0022      	movs	r2, r4
 800439a:	9901      	ldr	r1, [sp, #4]
 800439c:	9800      	ldr	r0, [sp, #0]
 800439e:	9e08      	ldr	r6, [sp, #32]
 80043a0:	3243      	adds	r2, #67	; 0x43
 80043a2:	47b0      	blx	r6
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d025      	beq.n	80043f4 <_printf_common+0xa8>
 80043a8:	2306      	movs	r3, #6
 80043aa:	6820      	ldr	r0, [r4, #0]
 80043ac:	682a      	ldr	r2, [r5, #0]
 80043ae:	68e1      	ldr	r1, [r4, #12]
 80043b0:	2500      	movs	r5, #0
 80043b2:	4003      	ands	r3, r0
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d103      	bne.n	80043c0 <_printf_common+0x74>
 80043b8:	1a8d      	subs	r5, r1, r2
 80043ba:	43eb      	mvns	r3, r5
 80043bc:	17db      	asrs	r3, r3, #31
 80043be:	401d      	ands	r5, r3
 80043c0:	68a3      	ldr	r3, [r4, #8]
 80043c2:	6922      	ldr	r2, [r4, #16]
 80043c4:	4293      	cmp	r3, r2
 80043c6:	dd01      	ble.n	80043cc <_printf_common+0x80>
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	18ed      	adds	r5, r5, r3
 80043cc:	2700      	movs	r7, #0
 80043ce:	42bd      	cmp	r5, r7
 80043d0:	d120      	bne.n	8004414 <_printf_common+0xc8>
 80043d2:	2000      	movs	r0, #0
 80043d4:	e010      	b.n	80043f8 <_printf_common+0xac>
 80043d6:	3701      	adds	r7, #1
 80043d8:	68e3      	ldr	r3, [r4, #12]
 80043da:	682a      	ldr	r2, [r5, #0]
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	42bb      	cmp	r3, r7
 80043e0:	ddd2      	ble.n	8004388 <_printf_common+0x3c>
 80043e2:	0022      	movs	r2, r4
 80043e4:	2301      	movs	r3, #1
 80043e6:	9901      	ldr	r1, [sp, #4]
 80043e8:	9800      	ldr	r0, [sp, #0]
 80043ea:	9e08      	ldr	r6, [sp, #32]
 80043ec:	3219      	adds	r2, #25
 80043ee:	47b0      	blx	r6
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d1f0      	bne.n	80043d6 <_printf_common+0x8a>
 80043f4:	2001      	movs	r0, #1
 80043f6:	4240      	negs	r0, r0
 80043f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043fa:	2030      	movs	r0, #48	; 0x30
 80043fc:	18e1      	adds	r1, r4, r3
 80043fe:	3143      	adds	r1, #67	; 0x43
 8004400:	7008      	strb	r0, [r1, #0]
 8004402:	0021      	movs	r1, r4
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	3145      	adds	r1, #69	; 0x45
 8004408:	7809      	ldrb	r1, [r1, #0]
 800440a:	18a2      	adds	r2, r4, r2
 800440c:	3243      	adds	r2, #67	; 0x43
 800440e:	3302      	adds	r3, #2
 8004410:	7011      	strb	r1, [r2, #0]
 8004412:	e7c1      	b.n	8004398 <_printf_common+0x4c>
 8004414:	0022      	movs	r2, r4
 8004416:	2301      	movs	r3, #1
 8004418:	9901      	ldr	r1, [sp, #4]
 800441a:	9800      	ldr	r0, [sp, #0]
 800441c:	9e08      	ldr	r6, [sp, #32]
 800441e:	321a      	adds	r2, #26
 8004420:	47b0      	blx	r6
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	d0e6      	beq.n	80043f4 <_printf_common+0xa8>
 8004426:	3701      	adds	r7, #1
 8004428:	e7d1      	b.n	80043ce <_printf_common+0x82>
	...

0800442c <_printf_i>:
 800442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442e:	b08b      	sub	sp, #44	; 0x2c
 8004430:	9206      	str	r2, [sp, #24]
 8004432:	000a      	movs	r2, r1
 8004434:	3243      	adds	r2, #67	; 0x43
 8004436:	9307      	str	r3, [sp, #28]
 8004438:	9005      	str	r0, [sp, #20]
 800443a:	9204      	str	r2, [sp, #16]
 800443c:	7e0a      	ldrb	r2, [r1, #24]
 800443e:	000c      	movs	r4, r1
 8004440:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004442:	2a78      	cmp	r2, #120	; 0x78
 8004444:	d807      	bhi.n	8004456 <_printf_i+0x2a>
 8004446:	2a62      	cmp	r2, #98	; 0x62
 8004448:	d809      	bhi.n	800445e <_printf_i+0x32>
 800444a:	2a00      	cmp	r2, #0
 800444c:	d100      	bne.n	8004450 <_printf_i+0x24>
 800444e:	e0c1      	b.n	80045d4 <_printf_i+0x1a8>
 8004450:	2a58      	cmp	r2, #88	; 0x58
 8004452:	d100      	bne.n	8004456 <_printf_i+0x2a>
 8004454:	e08c      	b.n	8004570 <_printf_i+0x144>
 8004456:	0026      	movs	r6, r4
 8004458:	3642      	adds	r6, #66	; 0x42
 800445a:	7032      	strb	r2, [r6, #0]
 800445c:	e022      	b.n	80044a4 <_printf_i+0x78>
 800445e:	0010      	movs	r0, r2
 8004460:	3863      	subs	r0, #99	; 0x63
 8004462:	2815      	cmp	r0, #21
 8004464:	d8f7      	bhi.n	8004456 <_printf_i+0x2a>
 8004466:	f7fb fe4d 	bl	8000104 <__gnu_thumb1_case_shi>
 800446a:	0016      	.short	0x0016
 800446c:	fff6001f 	.word	0xfff6001f
 8004470:	fff6fff6 	.word	0xfff6fff6
 8004474:	001ffff6 	.word	0x001ffff6
 8004478:	fff6fff6 	.word	0xfff6fff6
 800447c:	fff6fff6 	.word	0xfff6fff6
 8004480:	003600a8 	.word	0x003600a8
 8004484:	fff6009a 	.word	0xfff6009a
 8004488:	00b9fff6 	.word	0x00b9fff6
 800448c:	0036fff6 	.word	0x0036fff6
 8004490:	fff6fff6 	.word	0xfff6fff6
 8004494:	009e      	.short	0x009e
 8004496:	0026      	movs	r6, r4
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	3642      	adds	r6, #66	; 0x42
 800449c:	1d11      	adds	r1, r2, #4
 800449e:	6019      	str	r1, [r3, #0]
 80044a0:	6813      	ldr	r3, [r2, #0]
 80044a2:	7033      	strb	r3, [r6, #0]
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0a7      	b.n	80045f8 <_printf_i+0x1cc>
 80044a8:	6808      	ldr	r0, [r1, #0]
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	1d0a      	adds	r2, r1, #4
 80044ae:	0605      	lsls	r5, r0, #24
 80044b0:	d50b      	bpl.n	80044ca <_printf_i+0x9e>
 80044b2:	680d      	ldr	r5, [r1, #0]
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	da03      	bge.n	80044c2 <_printf_i+0x96>
 80044ba:	232d      	movs	r3, #45	; 0x2d
 80044bc:	9a04      	ldr	r2, [sp, #16]
 80044be:	426d      	negs	r5, r5
 80044c0:	7013      	strb	r3, [r2, #0]
 80044c2:	4b61      	ldr	r3, [pc, #388]	; (8004648 <_printf_i+0x21c>)
 80044c4:	270a      	movs	r7, #10
 80044c6:	9303      	str	r3, [sp, #12]
 80044c8:	e01b      	b.n	8004502 <_printf_i+0xd6>
 80044ca:	680d      	ldr	r5, [r1, #0]
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	0641      	lsls	r1, r0, #25
 80044d0:	d5f1      	bpl.n	80044b6 <_printf_i+0x8a>
 80044d2:	b22d      	sxth	r5, r5
 80044d4:	e7ef      	b.n	80044b6 <_printf_i+0x8a>
 80044d6:	680d      	ldr	r5, [r1, #0]
 80044d8:	6819      	ldr	r1, [r3, #0]
 80044da:	1d08      	adds	r0, r1, #4
 80044dc:	6018      	str	r0, [r3, #0]
 80044de:	062e      	lsls	r6, r5, #24
 80044e0:	d501      	bpl.n	80044e6 <_printf_i+0xba>
 80044e2:	680d      	ldr	r5, [r1, #0]
 80044e4:	e003      	b.n	80044ee <_printf_i+0xc2>
 80044e6:	066d      	lsls	r5, r5, #25
 80044e8:	d5fb      	bpl.n	80044e2 <_printf_i+0xb6>
 80044ea:	680d      	ldr	r5, [r1, #0]
 80044ec:	b2ad      	uxth	r5, r5
 80044ee:	4b56      	ldr	r3, [pc, #344]	; (8004648 <_printf_i+0x21c>)
 80044f0:	2708      	movs	r7, #8
 80044f2:	9303      	str	r3, [sp, #12]
 80044f4:	2a6f      	cmp	r2, #111	; 0x6f
 80044f6:	d000      	beq.n	80044fa <_printf_i+0xce>
 80044f8:	3702      	adds	r7, #2
 80044fa:	0023      	movs	r3, r4
 80044fc:	2200      	movs	r2, #0
 80044fe:	3343      	adds	r3, #67	; 0x43
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	6863      	ldr	r3, [r4, #4]
 8004504:	60a3      	str	r3, [r4, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	db03      	blt.n	8004512 <_printf_i+0xe6>
 800450a:	2204      	movs	r2, #4
 800450c:	6821      	ldr	r1, [r4, #0]
 800450e:	4391      	bics	r1, r2
 8004510:	6021      	str	r1, [r4, #0]
 8004512:	2d00      	cmp	r5, #0
 8004514:	d102      	bne.n	800451c <_printf_i+0xf0>
 8004516:	9e04      	ldr	r6, [sp, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00c      	beq.n	8004536 <_printf_i+0x10a>
 800451c:	9e04      	ldr	r6, [sp, #16]
 800451e:	0028      	movs	r0, r5
 8004520:	0039      	movs	r1, r7
 8004522:	f7fb fe7f 	bl	8000224 <__aeabi_uidivmod>
 8004526:	9b03      	ldr	r3, [sp, #12]
 8004528:	3e01      	subs	r6, #1
 800452a:	5c5b      	ldrb	r3, [r3, r1]
 800452c:	7033      	strb	r3, [r6, #0]
 800452e:	002b      	movs	r3, r5
 8004530:	0005      	movs	r5, r0
 8004532:	429f      	cmp	r7, r3
 8004534:	d9f3      	bls.n	800451e <_printf_i+0xf2>
 8004536:	2f08      	cmp	r7, #8
 8004538:	d109      	bne.n	800454e <_printf_i+0x122>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	07db      	lsls	r3, r3, #31
 800453e:	d506      	bpl.n	800454e <_printf_i+0x122>
 8004540:	6863      	ldr	r3, [r4, #4]
 8004542:	6922      	ldr	r2, [r4, #16]
 8004544:	4293      	cmp	r3, r2
 8004546:	dc02      	bgt.n	800454e <_printf_i+0x122>
 8004548:	2330      	movs	r3, #48	; 0x30
 800454a:	3e01      	subs	r6, #1
 800454c:	7033      	strb	r3, [r6, #0]
 800454e:	9b04      	ldr	r3, [sp, #16]
 8004550:	1b9b      	subs	r3, r3, r6
 8004552:	6123      	str	r3, [r4, #16]
 8004554:	9b07      	ldr	r3, [sp, #28]
 8004556:	0021      	movs	r1, r4
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	9805      	ldr	r0, [sp, #20]
 800455c:	9b06      	ldr	r3, [sp, #24]
 800455e:	aa09      	add	r2, sp, #36	; 0x24
 8004560:	f7ff fef4 	bl	800434c <_printf_common>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d14c      	bne.n	8004602 <_printf_i+0x1d6>
 8004568:	2001      	movs	r0, #1
 800456a:	4240      	negs	r0, r0
 800456c:	b00b      	add	sp, #44	; 0x2c
 800456e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004570:	3145      	adds	r1, #69	; 0x45
 8004572:	700a      	strb	r2, [r1, #0]
 8004574:	4a34      	ldr	r2, [pc, #208]	; (8004648 <_printf_i+0x21c>)
 8004576:	9203      	str	r2, [sp, #12]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	6821      	ldr	r1, [r4, #0]
 800457c:	ca20      	ldmia	r2!, {r5}
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	0608      	lsls	r0, r1, #24
 8004582:	d516      	bpl.n	80045b2 <_printf_i+0x186>
 8004584:	07cb      	lsls	r3, r1, #31
 8004586:	d502      	bpl.n	800458e <_printf_i+0x162>
 8004588:	2320      	movs	r3, #32
 800458a:	4319      	orrs	r1, r3
 800458c:	6021      	str	r1, [r4, #0]
 800458e:	2710      	movs	r7, #16
 8004590:	2d00      	cmp	r5, #0
 8004592:	d1b2      	bne.n	80044fa <_printf_i+0xce>
 8004594:	2320      	movs	r3, #32
 8004596:	6822      	ldr	r2, [r4, #0]
 8004598:	439a      	bics	r2, r3
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	e7ad      	b.n	80044fa <_printf_i+0xce>
 800459e:	2220      	movs	r2, #32
 80045a0:	6809      	ldr	r1, [r1, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	6022      	str	r2, [r4, #0]
 80045a6:	0022      	movs	r2, r4
 80045a8:	2178      	movs	r1, #120	; 0x78
 80045aa:	3245      	adds	r2, #69	; 0x45
 80045ac:	7011      	strb	r1, [r2, #0]
 80045ae:	4a27      	ldr	r2, [pc, #156]	; (800464c <_printf_i+0x220>)
 80045b0:	e7e1      	b.n	8004576 <_printf_i+0x14a>
 80045b2:	0648      	lsls	r0, r1, #25
 80045b4:	d5e6      	bpl.n	8004584 <_printf_i+0x158>
 80045b6:	b2ad      	uxth	r5, r5
 80045b8:	e7e4      	b.n	8004584 <_printf_i+0x158>
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	680d      	ldr	r5, [r1, #0]
 80045be:	1d10      	adds	r0, r2, #4
 80045c0:	6949      	ldr	r1, [r1, #20]
 80045c2:	6018      	str	r0, [r3, #0]
 80045c4:	6813      	ldr	r3, [r2, #0]
 80045c6:	062e      	lsls	r6, r5, #24
 80045c8:	d501      	bpl.n	80045ce <_printf_i+0x1a2>
 80045ca:	6019      	str	r1, [r3, #0]
 80045cc:	e002      	b.n	80045d4 <_printf_i+0x1a8>
 80045ce:	066d      	lsls	r5, r5, #25
 80045d0:	d5fb      	bpl.n	80045ca <_printf_i+0x19e>
 80045d2:	8019      	strh	r1, [r3, #0]
 80045d4:	2300      	movs	r3, #0
 80045d6:	9e04      	ldr	r6, [sp, #16]
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	e7bb      	b.n	8004554 <_printf_i+0x128>
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	1d11      	adds	r1, r2, #4
 80045e0:	6019      	str	r1, [r3, #0]
 80045e2:	6816      	ldr	r6, [r2, #0]
 80045e4:	2100      	movs	r1, #0
 80045e6:	0030      	movs	r0, r6
 80045e8:	6862      	ldr	r2, [r4, #4]
 80045ea:	f000 f937 	bl	800485c <memchr>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	d001      	beq.n	80045f6 <_printf_i+0x1ca>
 80045f2:	1b80      	subs	r0, r0, r6
 80045f4:	6060      	str	r0, [r4, #4]
 80045f6:	6863      	ldr	r3, [r4, #4]
 80045f8:	6123      	str	r3, [r4, #16]
 80045fa:	2300      	movs	r3, #0
 80045fc:	9a04      	ldr	r2, [sp, #16]
 80045fe:	7013      	strb	r3, [r2, #0]
 8004600:	e7a8      	b.n	8004554 <_printf_i+0x128>
 8004602:	6923      	ldr	r3, [r4, #16]
 8004604:	0032      	movs	r2, r6
 8004606:	9906      	ldr	r1, [sp, #24]
 8004608:	9805      	ldr	r0, [sp, #20]
 800460a:	9d07      	ldr	r5, [sp, #28]
 800460c:	47a8      	blx	r5
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	d0aa      	beq.n	8004568 <_printf_i+0x13c>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	079b      	lsls	r3, r3, #30
 8004616:	d415      	bmi.n	8004644 <_printf_i+0x218>
 8004618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800461a:	68e0      	ldr	r0, [r4, #12]
 800461c:	4298      	cmp	r0, r3
 800461e:	daa5      	bge.n	800456c <_printf_i+0x140>
 8004620:	0018      	movs	r0, r3
 8004622:	e7a3      	b.n	800456c <_printf_i+0x140>
 8004624:	0022      	movs	r2, r4
 8004626:	2301      	movs	r3, #1
 8004628:	9906      	ldr	r1, [sp, #24]
 800462a:	9805      	ldr	r0, [sp, #20]
 800462c:	9e07      	ldr	r6, [sp, #28]
 800462e:	3219      	adds	r2, #25
 8004630:	47b0      	blx	r6
 8004632:	1c43      	adds	r3, r0, #1
 8004634:	d098      	beq.n	8004568 <_printf_i+0x13c>
 8004636:	3501      	adds	r5, #1
 8004638:	68e3      	ldr	r3, [r4, #12]
 800463a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	42ab      	cmp	r3, r5
 8004640:	dcf0      	bgt.n	8004624 <_printf_i+0x1f8>
 8004642:	e7e9      	b.n	8004618 <_printf_i+0x1ec>
 8004644:	2500      	movs	r5, #0
 8004646:	e7f7      	b.n	8004638 <_printf_i+0x20c>
 8004648:	080049f1 	.word	0x080049f1
 800464c:	08004a02 	.word	0x08004a02

08004650 <_putc_r>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	0006      	movs	r6, r0
 8004654:	000d      	movs	r5, r1
 8004656:	0014      	movs	r4, r2
 8004658:	2800      	cmp	r0, #0
 800465a:	d004      	beq.n	8004666 <_putc_r+0x16>
 800465c:	6983      	ldr	r3, [r0, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <_putc_r+0x16>
 8004662:	f7ff fb1f 	bl	8003ca4 <__sinit>
 8004666:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <_putc_r+0x88>)
 8004668:	429c      	cmp	r4, r3
 800466a:	d124      	bne.n	80046b6 <_putc_r+0x66>
 800466c:	6874      	ldr	r4, [r6, #4]
 800466e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004670:	07db      	lsls	r3, r3, #31
 8004672:	d405      	bmi.n	8004680 <_putc_r+0x30>
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	059b      	lsls	r3, r3, #22
 8004678:	d402      	bmi.n	8004680 <_putc_r+0x30>
 800467a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800467c:	f7ff fbb3 	bl	8003de6 <__retarget_lock_acquire_recursive>
 8004680:	68a3      	ldr	r3, [r4, #8]
 8004682:	3b01      	subs	r3, #1
 8004684:	60a3      	str	r3, [r4, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	da05      	bge.n	8004696 <_putc_r+0x46>
 800468a:	69a2      	ldr	r2, [r4, #24]
 800468c:	4293      	cmp	r3, r2
 800468e:	db1c      	blt.n	80046ca <_putc_r+0x7a>
 8004690:	b2eb      	uxtb	r3, r5
 8004692:	2b0a      	cmp	r3, #10
 8004694:	d019      	beq.n	80046ca <_putc_r+0x7a>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	6022      	str	r2, [r4, #0]
 800469c:	701d      	strb	r5, [r3, #0]
 800469e:	b2ed      	uxtb	r5, r5
 80046a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046a2:	07db      	lsls	r3, r3, #31
 80046a4:	d405      	bmi.n	80046b2 <_putc_r+0x62>
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	059b      	lsls	r3, r3, #22
 80046aa:	d402      	bmi.n	80046b2 <_putc_r+0x62>
 80046ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ae:	f7ff fb9b 	bl	8003de8 <__retarget_lock_release_recursive>
 80046b2:	0028      	movs	r0, r5
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	4b09      	ldr	r3, [pc, #36]	; (80046dc <_putc_r+0x8c>)
 80046b8:	429c      	cmp	r4, r3
 80046ba:	d101      	bne.n	80046c0 <_putc_r+0x70>
 80046bc:	68b4      	ldr	r4, [r6, #8]
 80046be:	e7d6      	b.n	800466e <_putc_r+0x1e>
 80046c0:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <_putc_r+0x90>)
 80046c2:	429c      	cmp	r4, r3
 80046c4:	d1d3      	bne.n	800466e <_putc_r+0x1e>
 80046c6:	68f4      	ldr	r4, [r6, #12]
 80046c8:	e7d1      	b.n	800466e <_putc_r+0x1e>
 80046ca:	0029      	movs	r1, r5
 80046cc:	0022      	movs	r2, r4
 80046ce:	0030      	movs	r0, r6
 80046d0:	f7ff f8ec 	bl	80038ac <__swbuf_r>
 80046d4:	0005      	movs	r5, r0
 80046d6:	e7e3      	b.n	80046a0 <_putc_r+0x50>
 80046d8:	080049a0 	.word	0x080049a0
 80046dc:	080049c0 	.word	0x080049c0
 80046e0:	08004980 	.word	0x08004980

080046e4 <_sbrk_r>:
 80046e4:	2300      	movs	r3, #0
 80046e6:	b570      	push	{r4, r5, r6, lr}
 80046e8:	4d06      	ldr	r5, [pc, #24]	; (8004704 <_sbrk_r+0x20>)
 80046ea:	0004      	movs	r4, r0
 80046ec:	0008      	movs	r0, r1
 80046ee:	602b      	str	r3, [r5, #0]
 80046f0:	f7fc fae8 	bl	8000cc4 <_sbrk>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	d103      	bne.n	8004700 <_sbrk_r+0x1c>
 80046f8:	682b      	ldr	r3, [r5, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d000      	beq.n	8004700 <_sbrk_r+0x1c>
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	bd70      	pop	{r4, r5, r6, pc}
 8004702:	46c0      	nop			; (mov r8, r8)
 8004704:	200003d0 	.word	0x200003d0

08004708 <__sread>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	000c      	movs	r4, r1
 800470c:	250e      	movs	r5, #14
 800470e:	5f49      	ldrsh	r1, [r1, r5]
 8004710:	f000 f8c0 	bl	8004894 <_read_r>
 8004714:	2800      	cmp	r0, #0
 8004716:	db03      	blt.n	8004720 <__sread+0x18>
 8004718:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800471a:	181b      	adds	r3, r3, r0
 800471c:	6563      	str	r3, [r4, #84]	; 0x54
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	4a02      	ldr	r2, [pc, #8]	; (800472c <__sread+0x24>)
 8004724:	4013      	ands	r3, r2
 8004726:	81a3      	strh	r3, [r4, #12]
 8004728:	e7f9      	b.n	800471e <__sread+0x16>
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	ffffefff 	.word	0xffffefff

08004730 <__swrite>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	001f      	movs	r7, r3
 8004734:	898b      	ldrh	r3, [r1, #12]
 8004736:	0005      	movs	r5, r0
 8004738:	000c      	movs	r4, r1
 800473a:	0016      	movs	r6, r2
 800473c:	05db      	lsls	r3, r3, #23
 800473e:	d505      	bpl.n	800474c <__swrite+0x1c>
 8004740:	230e      	movs	r3, #14
 8004742:	5ec9      	ldrsh	r1, [r1, r3]
 8004744:	2200      	movs	r2, #0
 8004746:	2302      	movs	r3, #2
 8004748:	f000 f874 	bl	8004834 <_lseek_r>
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	4a05      	ldr	r2, [pc, #20]	; (8004764 <__swrite+0x34>)
 8004750:	0028      	movs	r0, r5
 8004752:	4013      	ands	r3, r2
 8004754:	81a3      	strh	r3, [r4, #12]
 8004756:	0032      	movs	r2, r6
 8004758:	230e      	movs	r3, #14
 800475a:	5ee1      	ldrsh	r1, [r4, r3]
 800475c:	003b      	movs	r3, r7
 800475e:	f000 f81f 	bl	80047a0 <_write_r>
 8004762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004764:	ffffefff 	.word	0xffffefff

08004768 <__sseek>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	000c      	movs	r4, r1
 800476c:	250e      	movs	r5, #14
 800476e:	5f49      	ldrsh	r1, [r1, r5]
 8004770:	f000 f860 	bl	8004834 <_lseek_r>
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	1c42      	adds	r2, r0, #1
 8004778:	d103      	bne.n	8004782 <__sseek+0x1a>
 800477a:	4a05      	ldr	r2, [pc, #20]	; (8004790 <__sseek+0x28>)
 800477c:	4013      	ands	r3, r2
 800477e:	81a3      	strh	r3, [r4, #12]
 8004780:	bd70      	pop	{r4, r5, r6, pc}
 8004782:	2280      	movs	r2, #128	; 0x80
 8004784:	0152      	lsls	r2, r2, #5
 8004786:	4313      	orrs	r3, r2
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	6560      	str	r0, [r4, #84]	; 0x54
 800478c:	e7f8      	b.n	8004780 <__sseek+0x18>
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	ffffefff 	.word	0xffffefff

08004794 <__sclose>:
 8004794:	b510      	push	{r4, lr}
 8004796:	230e      	movs	r3, #14
 8004798:	5ec9      	ldrsh	r1, [r1, r3]
 800479a:	f000 f815 	bl	80047c8 <_close_r>
 800479e:	bd10      	pop	{r4, pc}

080047a0 <_write_r>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	0004      	movs	r4, r0
 80047a4:	0008      	movs	r0, r1
 80047a6:	0011      	movs	r1, r2
 80047a8:	001a      	movs	r2, r3
 80047aa:	2300      	movs	r3, #0
 80047ac:	4d05      	ldr	r5, [pc, #20]	; (80047c4 <_write_r+0x24>)
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fc fa3f 	bl	8000c32 <_write>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d103      	bne.n	80047c0 <_write_r+0x20>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d000      	beq.n	80047c0 <_write_r+0x20>
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	200003d0 	.word	0x200003d0

080047c8 <_close_r>:
 80047c8:	2300      	movs	r3, #0
 80047ca:	b570      	push	{r4, r5, r6, lr}
 80047cc:	4d06      	ldr	r5, [pc, #24]	; (80047e8 <_close_r+0x20>)
 80047ce:	0004      	movs	r4, r0
 80047d0:	0008      	movs	r0, r1
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	f7fc fa49 	bl	8000c6a <_close>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d103      	bne.n	80047e4 <_close_r+0x1c>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d000      	beq.n	80047e4 <_close_r+0x1c>
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	200003d0 	.word	0x200003d0

080047ec <_fstat_r>:
 80047ec:	2300      	movs	r3, #0
 80047ee:	b570      	push	{r4, r5, r6, lr}
 80047f0:	4d06      	ldr	r5, [pc, #24]	; (800480c <_fstat_r+0x20>)
 80047f2:	0004      	movs	r4, r0
 80047f4:	0008      	movs	r0, r1
 80047f6:	0011      	movs	r1, r2
 80047f8:	602b      	str	r3, [r5, #0]
 80047fa:	f7fc fa40 	bl	8000c7e <_fstat>
 80047fe:	1c43      	adds	r3, r0, #1
 8004800:	d103      	bne.n	800480a <_fstat_r+0x1e>
 8004802:	682b      	ldr	r3, [r5, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d000      	beq.n	800480a <_fstat_r+0x1e>
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	200003d0 	.word	0x200003d0

08004810 <_isatty_r>:
 8004810:	2300      	movs	r3, #0
 8004812:	b570      	push	{r4, r5, r6, lr}
 8004814:	4d06      	ldr	r5, [pc, #24]	; (8004830 <_isatty_r+0x20>)
 8004816:	0004      	movs	r4, r0
 8004818:	0008      	movs	r0, r1
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	f7fc fa3d 	bl	8000c9a <_isatty>
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	d103      	bne.n	800482c <_isatty_r+0x1c>
 8004824:	682b      	ldr	r3, [r5, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d000      	beq.n	800482c <_isatty_r+0x1c>
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	bd70      	pop	{r4, r5, r6, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	200003d0 	.word	0x200003d0

08004834 <_lseek_r>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	0004      	movs	r4, r0
 8004838:	0008      	movs	r0, r1
 800483a:	0011      	movs	r1, r2
 800483c:	001a      	movs	r2, r3
 800483e:	2300      	movs	r3, #0
 8004840:	4d05      	ldr	r5, [pc, #20]	; (8004858 <_lseek_r+0x24>)
 8004842:	602b      	str	r3, [r5, #0]
 8004844:	f7fc fa32 	bl	8000cac <_lseek>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d103      	bne.n	8004854 <_lseek_r+0x20>
 800484c:	682b      	ldr	r3, [r5, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d000      	beq.n	8004854 <_lseek_r+0x20>
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	bd70      	pop	{r4, r5, r6, pc}
 8004856:	46c0      	nop			; (mov r8, r8)
 8004858:	200003d0 	.word	0x200003d0

0800485c <memchr>:
 800485c:	b2c9      	uxtb	r1, r1
 800485e:	1882      	adds	r2, r0, r2
 8004860:	4290      	cmp	r0, r2
 8004862:	d101      	bne.n	8004868 <memchr+0xc>
 8004864:	2000      	movs	r0, #0
 8004866:	4770      	bx	lr
 8004868:	7803      	ldrb	r3, [r0, #0]
 800486a:	428b      	cmp	r3, r1
 800486c:	d0fb      	beq.n	8004866 <memchr+0xa>
 800486e:	3001      	adds	r0, #1
 8004870:	e7f6      	b.n	8004860 <memchr+0x4>
	...

08004874 <__malloc_lock>:
 8004874:	b510      	push	{r4, lr}
 8004876:	4802      	ldr	r0, [pc, #8]	; (8004880 <__malloc_lock+0xc>)
 8004878:	f7ff fab5 	bl	8003de6 <__retarget_lock_acquire_recursive>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	200003c4 	.word	0x200003c4

08004884 <__malloc_unlock>:
 8004884:	b510      	push	{r4, lr}
 8004886:	4802      	ldr	r0, [pc, #8]	; (8004890 <__malloc_unlock+0xc>)
 8004888:	f7ff faae 	bl	8003de8 <__retarget_lock_release_recursive>
 800488c:	bd10      	pop	{r4, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	200003c4 	.word	0x200003c4

08004894 <_read_r>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	0004      	movs	r4, r0
 8004898:	0008      	movs	r0, r1
 800489a:	0011      	movs	r1, r2
 800489c:	001a      	movs	r2, r3
 800489e:	2300      	movs	r3, #0
 80048a0:	4d05      	ldr	r5, [pc, #20]	; (80048b8 <_read_r+0x24>)
 80048a2:	602b      	str	r3, [r5, #0]
 80048a4:	f7fc f9a8 	bl	8000bf8 <_read>
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	d103      	bne.n	80048b4 <_read_r+0x20>
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d000      	beq.n	80048b4 <_read_r+0x20>
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	bd70      	pop	{r4, r5, r6, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	200003d0 	.word	0x200003d0

080048bc <_init>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr

080048c8 <_fini>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr
